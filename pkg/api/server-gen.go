// Package api provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// Expense defines model for expense.
type Expense struct {

	// States whether a third party (employee, etc.) advanced the payment of this Expense for the company
	AdvancedByThirdParty *bool `json:"advancedByThirdParty,omitempty"`

	// Refers to the third party which advanced the payment
	AdvancedThirdPartyId *string `json:"advancedThirdPartyId,omitempty"`

	// Representation of a amount of money. Cents are appended as a two digit number separated by a dot. The value has to be appended with the three character currency code.
	Amount *string `json:"amount,omitempty"`

	// States whether the costs for the Expense will be forwarded to the customer
	Billable *bool `json:"billable,omitempty"`

	// Day the obligation emerged
	DateOfAccrual *string `json:"dateOfAccrual,omitempty"`

	// The date of the settlement of the Expense (the company has not to take further actions after this date)
	DateOfSettlement *string `json:"dateOfSettlement,omitempty"`

	// Classify the Expense into an Expense category. This information is used to generate the ledger entries for the Expense. Notice: The Expense category has to be existent in acc.
	ExpenseCategory *string `json:"expenseCategory,omitempty"`

	// UUID of the object used for the universal identification of an element
	Id *string `json:"id,omitempty"`

	// Unique user-chosen identifier for a Expense, should be human readable
	Identifier *string `json:"identifier,omitempty"`

	// States whether this Expense is for an internal purpose or not.
	Internal *bool `json:"internal,omitempty"`

	// Describes meaningful manner the Expense
	Name *string `json:"name,omitempty"`

	// Refers to the customer which have to pay the Expense
	ObligedCustomerId *string `json:"obligedCustomerId,omitempty"`

	// States whether the Expense was directly paid with the main account debithether the Expense was directly paid with the main account debit card.
	PaidWithDebit *bool `json:"paidWithDebit,omitempty"`

	// The full path to the business record document (PDF or PNG)
	Path *string `json:"path,omitempty"`

	// Refers to the associated project.
	ProjectId *string `json:"projectId,omitempty"`

	// Refers to a possible bank transaction which settled the Expense for the company
	SettlementTransactionId *string `json:"settlementTransactionId,omitempty"`
}

// ExpenseBase defines model for expenseBase.
type ExpenseBase struct {

	// States whether a third party (employee, etc.) advanced the payment of this Expense for the company
	AdvancedByThirdParty *bool `json:"advancedByThirdParty,omitempty"`

	// Refers to the third party which advanced the payment
	AdvancedThirdPartyId *string `json:"advancedThirdPartyId,omitempty"`

	// The costs of the Expense
	Amount *string `json:"amount,omitempty"`

	// States whether the costs for the Expense will be forwarded to the customer
	Billable *bool `json:"billable,omitempty"`

	// Day the obligation emerged
	DateOfAccrual *string `json:"dateOfAccrual,omitempty"`

	// The date of the settlement of the Expense (the company has not to take further actions after this date)
	DateOfSettlement *string `json:"dateOfSettlement,omitempty"`

	// Classify the Expense into an Expense category. This information is used to generate the ledger entries for the Expense. Notice: The Expense category has to be existent in acc.
	ExpenseCategory *string `json:"expenseCategory,omitempty"`

	// Unique user-chosen identifier for a Expense, should be human readable
	Identifier *string `json:"identifier,omitempty"`

	// States whether this Expense is for an internal purpose or not.
	Internal *bool `json:"internal,omitempty"`

	// Describes meaningful manner the Expense
	Name *string `json:"name,omitempty"`

	// Refers to the customer which have to pay the Expense
	ObligedCustomerId *string `json:"obligedCustomerId,omitempty"`

	// States whether the Expense was directly paid with the main account debithether the Expense was directly paid with the main account debit card.
	PaidWithDebit *bool `json:"paidWithDebit,omitempty"`

	// The full path to the business record document (PDF or PNG)
	Path *string `json:"path,omitempty"`

	// Refers to the associated project.
	ProjectId *string `json:"projectId,omitempty"`

	// Refers to a possible bank transaction which settled the Expense for the company
	SettlementTransactionId *string `json:"settlementTransactionId,omitempty"`
}

// Expenses defines model for expenses.
type Expenses []Expense

// Invoice defines model for invoice.
type Invoice struct {

	// Outstanding amount.
	Amount *string `json:"amount,omitempty"`

	// Refers to the customer the Invoice was sent to.
	CustomerId *string `json:"customerId,omitempty"`

	// The date the customer paid the outstanding amount.
	DateOfSettlement *string `json:"dateOfSettlement,omitempty"`

	// UUID of the object used for the universal identification of an element
	Id *string `json:"id,omitempty"`

	// Unique user-chosen identifier for a Invoice, should be human readable
	Identifier *string `json:"identifier,omitempty"`

	// Describes the Invoice.
	Name *string `json:"name,omitempty"`

	// The full path to the business record document (PDF or PNG).
	Path *string `json:"path,omitempty"`

	// Refers to the associated project.
	ProjectId *string `json:"projectId,omitempty"`

	// Revoked Invoices are disabled an no longer taken into account.
	Revoked *bool `json:"revoked,omitempty"`

	// Day the Invoice was sent to the customer.
	SendDate *string `json:"sendDate,omitempty"`

	// Refers to a possible bank transaction which settled the Invoice for the company.
	SettlementTransactionId *string `json:"settlementTransactionId,omitempty"`
}

// InvoiceBase defines model for invoiceBase.
type InvoiceBase struct {

	// Outstanding amount.
	Amount *string `json:"amount,omitempty"`

	// Refers to the customer the Invoice was sent to.
	CustomerId *string `json:"customerId,omitempty"`

	// The date the customer paid the outstanding amount.
	DateOfSettlement *string `json:"dateOfSettlement,omitempty"`

	// Unique user-chosen identifier for a Invoice, should be human readable
	Identifier *string `json:"identifier,omitempty"`

	// Describes the Invoice.
	Name *string `json:"name,omitempty"`

	// The full path to the business record document (PDF or PNG).
	Path *string `json:"path,omitempty"`

	// Refers to the associated project.
	ProjectId *string `json:"projectId,omitempty"`

	// Revoked Invoices are disabled an no longer taken into account.
	Revoked *bool `json:"revoked,omitempty"`

	// Day the Invoice was sent to the customer.
	SendDate *string `json:"sendDate,omitempty"`

	// Refers to a possible bank transaction which settled the Invoice for the company.
	SettlementTransactionId *string `json:"settlementTransactionId,omitempty"`
}

// Invoices defines model for invoices.
type Invoices []Invoice

// MiscRecord defines model for miscRecord.
type MiscRecord struct {

	// Day the Miscellaneous Record arrived emerged
	Date *string `json:"date,omitempty"`

	// Unique user-chosen identifier for a Miscellaneous Records, should be human readable
	Identifier *string `json:"identifier,omitempty"`

	// Name of the Miscellaneous Record.
	Name *string `json:"name,omitempty"`

	// The full path to the business record document (PDF or PNG)
	Path *string `json:"path,omitempty"`

	// Refers to an optional transaction which was issued upon the arrival of the Miscellaneous Record. Name of this property is misleading and will be changed in a future version.
	SettlementTransactionId *string `json:"settlementTransactionId,omitempty"`
}

// MiscRecordBase defines model for miscRecordBase.
type MiscRecordBase struct {

	// Day the Miscellaneous Record arrived emerged
	Date *string `json:"date,omitempty"`

	// Unique user-chosen identifier for a Invoice, should be human readable
	Identifier *string `json:"identifier,omitempty"`

	// Name of the Miscellaneous Record.
	Name *string `json:"name,omitempty"`

	// The full path to the business record document (PDF or PNG)
	Path *string `json:"path,omitempty"`

	// Refers to an optional transaction which was issued upon the arrival of the Miscellaneous Record. Name of this property is misleading and will be changed in a future version.
	SettlementTransactionId *string `json:"settlementTransactionId,omitempty"`
}

// MiscRecords defines model for miscRecords.
type MiscRecords []MiscRecord

// Parties defines model for parties.
type Parties []Party

// Party defines model for party.
type Party struct {

	// UUID of the object used for the universal identification of an element
	Id *string `json:"id,omitempty"`

	// Unique user-chosen identifier for a Invoice, should be human readable
	Identifier *string `json:"identifier,omitempty"`

	// Name of the person/company
	Name *string `json:"name,omitempty"`

	// States whether a party is a customer or a employee. 0 = Employee, 1 = Customer.
	PartyType *int `json:"partyType,omitempty"`

	// Name of the place
	Place *string `json:"place,omitempty"`

	// ZIP/Postal-Code of the address
	PostalCode *int `json:"postalCode,omitempty"`

	// Name of the street the party residence in
	Street *string `json:"street,omitempty"`

	// Street number of party's address
	StreetNr *int `json:"streetNr,omitempty"`
}

// PartyBase defines model for partyBase.
type PartyBase struct {

	// Unique user-chosen identifier for a Party, should be human readable
	Identifier *string `json:"identifier,omitempty"`

	// Name of the person/company
	Name *string `json:"name,omitempty"`

	// States whether a party is a customer or a employee. 0 = Employee, 1 = Customer.
	PartyType *int `json:"partyType,omitempty"`

	// Name of the place
	Place *string `json:"place,omitempty"`

	// ZIP/Postal-Code of the address
	PostalCode *int `json:"postalCode,omitempty"`

	// Name of the street the party residence in
	Street *string `json:"street,omitempty"`

	// Street number of party's address
	StreetNr *int `json:"streetNr,omitempty"`
}

// Project defines model for project.
type Project struct {

	// Refers to the customer the project is associated to.
	CustomerId *string `json:"customerId,omitempty"`

	// UUID of the object used for the universal identification of an element
	Id *string `json:"id,omitempty"`

	// Unique user-chosen identifier for a Project, should be human readable
	Identifier *string `json:"identifier,omitempty"`

	// Name of the Project.
	Name *string `json:"name,omitempty"`
}

// ProjectBase defines model for projectBase.
type ProjectBase struct {

	// Refers to the customer the project is associated to.
	CustomerId *string `json:"customerId,omitempty"`

	// Unique user-chosen identifier for a Project, should be human readable
	Identifier *string `json:"identifier,omitempty"`

	// Name of the Project.
	Name *string `json:"name,omitempty"`
}

// Projects defines model for projects.
type Projects []Project

// GetCustomersParams defines parameters for GetCustomers.
type GetCustomersParams struct {

	// The current version of Acc doesn't support searching in specific parameters it uses a fuzzy search over all advisable fields and returns any matching Customers.
	Query *string `json:"query,omitempty"`

	// Search for Customers with a matching identifier. This returns only exact matching elements (no fuzzy search whatsoever).
	Identifier *string `json:"identifier,omitempty"`
}

// PostCustomersIdJSONBody defines parameters for PostCustomersId.
type PostCustomersIdJSONBody PartyBase

// PutCustomersIdJSONBody defines parameters for PutCustomersId.
type PutCustomersIdJSONBody PartyBase

// GetEmployeesParams defines parameters for GetEmployees.
type GetEmployeesParams struct {

	// The current version of Acc doesn't support searching in specific parameters it uses a fuzzy search over all advisable fields and returns any matching Employees.
	Query *string `json:"query,omitempty"`

	// Search for Employees with a matching identifier. This returns only exact matching elements (no fuzzy search whatsoever).
	Identifier *string `json:"identifier,omitempty"`
}

// PostEmployeesIdJSONBody defines parameters for PostEmployeesId.
type PostEmployeesIdJSONBody PartyBase

// PutEmployeesIdJSONBody defines parameters for PutEmployeesId.
type PutEmployeesIdJSONBody PartyBase

// GetExpensesParams defines parameters for GetExpenses.
type GetExpensesParams struct {

	// The current version of Acc doesn't support searching in specific parameters it uses a fuzzy search over all advisable fields and returns any matching Expenses.
	Query *string `json:"query,omitempty"`

	// Search for Expenses with a matching identifier. This returns only exact matching elements (no fuzzy search whatsoever).
	Identifier *string `json:"identifier,omitempty"`
}

// PostExpensesIdJSONBody defines parameters for PostExpensesId.
type PostExpensesIdJSONBody ExpenseBase

// PutExpensesIdJSONBody defines parameters for PutExpensesId.
type PutExpensesIdJSONBody ExpenseBase

// GetInvoicesParams defines parameters for GetInvoices.
type GetInvoicesParams struct {

	// The current version of Acc doesn't support searching in specific parameters it uses a fuzzy search over all advisable fields and returns any matching Invoices.
	Query *string `json:"query,omitempty"`

	// Search for Invoices with a matching identifier. This returns only exact matching elements (no fuzzy search whatsoever).
	Identifier *string `json:"identifier,omitempty"`
}

// PostInvoicesIdJSONBody defines parameters for PostInvoicesId.
type PostInvoicesIdJSONBody InvoiceBase

// PutInvoicesIdJSONBody defines parameters for PutInvoicesId.
type PutInvoicesIdJSONBody InvoiceBase

// GetMiscRecordsParams defines parameters for GetMiscRecords.
type GetMiscRecordsParams struct {

	// The current version of Acc doesn't support searching in specific parameters it uses a fuzzy search over all advisable fields and returns any matching customers.
	Query *string `json:"query,omitempty"`

	// Search for Miscellaneous Records with a matching identifier. This returns only exact matching elements (no fuzzy search whatsoever).
	Identifier *string `json:"identifier,omitempty"`
}

// PostMiscRecordsIdJSONBody defines parameters for PostMiscRecordsId.
type PostMiscRecordsIdJSONBody MiscRecordBase

// PutMiscRecordsIdJSONBody defines parameters for PutMiscRecordsId.
type PutMiscRecordsIdJSONBody MiscRecordBase

// GetProjectsParams defines parameters for GetProjects.
type GetProjectsParams struct {

	// The current version of Acc doesn't support searching in specific parameters it uses a fuzzy search over all advisable fields and returns any matching Projects.
	Query *string `json:"query,omitempty"`

	// Search for Projects with a matching identifier. This returns only exact matching elements (no fuzzy search whatsoever).
	Identifier *string `json:"identifier,omitempty"`
}

// PostProjectsIdJSONBody defines parameters for PostProjectsId.
type PostProjectsIdJSONBody ProjectBase

// PutProjectsIdJSONBody defines parameters for PutProjectsId.
type PutProjectsIdJSONBody ProjectBase

// PostCustomersIdRequestBody defines body for PostCustomersId for application/json ContentType.
type PostCustomersIdJSONRequestBody PostCustomersIdJSONBody

// PutCustomersIdRequestBody defines body for PutCustomersId for application/json ContentType.
type PutCustomersIdJSONRequestBody PutCustomersIdJSONBody

// PostEmployeesIdRequestBody defines body for PostEmployeesId for application/json ContentType.
type PostEmployeesIdJSONRequestBody PostEmployeesIdJSONBody

// PutEmployeesIdRequestBody defines body for PutEmployeesId for application/json ContentType.
type PutEmployeesIdJSONRequestBody PutEmployeesIdJSONBody

// PostExpensesIdRequestBody defines body for PostExpensesId for application/json ContentType.
type PostExpensesIdJSONRequestBody PostExpensesIdJSONBody

// PutExpensesIdRequestBody defines body for PutExpensesId for application/json ContentType.
type PutExpensesIdJSONRequestBody PutExpensesIdJSONBody

// PostInvoicesIdRequestBody defines body for PostInvoicesId for application/json ContentType.
type PostInvoicesIdJSONRequestBody PostInvoicesIdJSONBody

// PutInvoicesIdRequestBody defines body for PutInvoicesId for application/json ContentType.
type PutInvoicesIdJSONRequestBody PutInvoicesIdJSONBody

// PostMiscRecordsIdRequestBody defines body for PostMiscRecordsId for application/json ContentType.
type PostMiscRecordsIdJSONRequestBody PostMiscRecordsIdJSONBody

// PutMiscRecordsIdRequestBody defines body for PutMiscRecordsId for application/json ContentType.
type PutMiscRecordsIdJSONRequestBody PutMiscRecordsIdJSONBody

// PostProjectsIdRequestBody defines body for PostProjectsId for application/json ContentType.
type PostProjectsIdJSONRequestBody PostProjectsIdJSONBody

// PutProjectsIdRequestBody defines body for PutProjectsId for application/json ContentType.
type PutProjectsIdJSONRequestBody PutProjectsIdJSONBody

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A callback for modifying requests which are generated before sending over
	// the network.
	RequestEditor RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = http.DefaultClient
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditor = fn
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetCustomers request
	GetCustomers(ctx context.Context, params *GetCustomersParams) (*http.Response, error)

	// DeleteCustomersId request
	DeleteCustomersId(ctx context.Context, id string) (*http.Response, error)

	// GetCustomersId request
	GetCustomersId(ctx context.Context, id string) (*http.Response, error)

	// PostCustomersId request  with any body
	PostCustomersIdWithBody(ctx context.Context, id string, contentType string, body io.Reader) (*http.Response, error)

	PostCustomersId(ctx context.Context, id string, body PostCustomersIdJSONRequestBody) (*http.Response, error)

	// PutCustomersId request  with any body
	PutCustomersIdWithBody(ctx context.Context, id string, contentType string, body io.Reader) (*http.Response, error)

	PutCustomersId(ctx context.Context, id string, body PutCustomersIdJSONRequestBody) (*http.Response, error)

	// GetEmployees request
	GetEmployees(ctx context.Context, params *GetEmployeesParams) (*http.Response, error)

	// DeleteEmployeesId request
	DeleteEmployeesId(ctx context.Context, id string) (*http.Response, error)

	// GetEmployeesId request
	GetEmployeesId(ctx context.Context, id string) (*http.Response, error)

	// PostEmployeesId request  with any body
	PostEmployeesIdWithBody(ctx context.Context, id string, contentType string, body io.Reader) (*http.Response, error)

	PostEmployeesId(ctx context.Context, id string, body PostEmployeesIdJSONRequestBody) (*http.Response, error)

	// PutEmployeesId request  with any body
	PutEmployeesIdWithBody(ctx context.Context, id string, contentType string, body io.Reader) (*http.Response, error)

	PutEmployeesId(ctx context.Context, id string, body PutEmployeesIdJSONRequestBody) (*http.Response, error)

	// GetExpenses request
	GetExpenses(ctx context.Context, params *GetExpensesParams) (*http.Response, error)

	// DeleteExpensesId request
	DeleteExpensesId(ctx context.Context, id string) (*http.Response, error)

	// GetExpensesId request
	GetExpensesId(ctx context.Context, id string) (*http.Response, error)

	// PostExpensesId request  with any body
	PostExpensesIdWithBody(ctx context.Context, id string, contentType string, body io.Reader) (*http.Response, error)

	PostExpensesId(ctx context.Context, id string, body PostExpensesIdJSONRequestBody) (*http.Response, error)

	// PutExpensesId request  with any body
	PutExpensesIdWithBody(ctx context.Context, id string, contentType string, body io.Reader) (*http.Response, error)

	PutExpensesId(ctx context.Context, id string, body PutExpensesIdJSONRequestBody) (*http.Response, error)

	// GetInvoices request
	GetInvoices(ctx context.Context, params *GetInvoicesParams) (*http.Response, error)

	// DeleteInvoicesId request
	DeleteInvoicesId(ctx context.Context, id string) (*http.Response, error)

	// GetInvoicesId request
	GetInvoicesId(ctx context.Context, id string) (*http.Response, error)

	// PostInvoicesId request  with any body
	PostInvoicesIdWithBody(ctx context.Context, id string, contentType string, body io.Reader) (*http.Response, error)

	PostInvoicesId(ctx context.Context, id string, body PostInvoicesIdJSONRequestBody) (*http.Response, error)

	// PutInvoicesId request  with any body
	PutInvoicesIdWithBody(ctx context.Context, id string, contentType string, body io.Reader) (*http.Response, error)

	PutInvoicesId(ctx context.Context, id string, body PutInvoicesIdJSONRequestBody) (*http.Response, error)

	// GetMiscRecords request
	GetMiscRecords(ctx context.Context, params *GetMiscRecordsParams) (*http.Response, error)

	// DeleteMiscRecordsId request
	DeleteMiscRecordsId(ctx context.Context, id string) (*http.Response, error)

	// GetMiscRecordsId request
	GetMiscRecordsId(ctx context.Context, id string) (*http.Response, error)

	// PostMiscRecordsId request  with any body
	PostMiscRecordsIdWithBody(ctx context.Context, id string, contentType string, body io.Reader) (*http.Response, error)

	PostMiscRecordsId(ctx context.Context, id string, body PostMiscRecordsIdJSONRequestBody) (*http.Response, error)

	// PutMiscRecordsId request  with any body
	PutMiscRecordsIdWithBody(ctx context.Context, id string, contentType string, body io.Reader) (*http.Response, error)

	PutMiscRecordsId(ctx context.Context, id string, body PutMiscRecordsIdJSONRequestBody) (*http.Response, error)

	// GetProjects request
	GetProjects(ctx context.Context, params *GetProjectsParams) (*http.Response, error)

	// DeleteProjectsId request
	DeleteProjectsId(ctx context.Context, id string) (*http.Response, error)

	// GetProjectsId request
	GetProjectsId(ctx context.Context, id string) (*http.Response, error)

	// PostProjectsId request  with any body
	PostProjectsIdWithBody(ctx context.Context, id string, contentType string, body io.Reader) (*http.Response, error)

	PostProjectsId(ctx context.Context, id string, body PostProjectsIdJSONRequestBody) (*http.Response, error)

	// PutProjectsId request  with any body
	PutProjectsIdWithBody(ctx context.Context, id string, contentType string, body io.Reader) (*http.Response, error)

	PutProjectsId(ctx context.Context, id string, body PutProjectsIdJSONRequestBody) (*http.Response, error)
}

func (c *Client) GetCustomers(ctx context.Context, params *GetCustomersParams) (*http.Response, error) {
	req, err := NewGetCustomersRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteCustomersId(ctx context.Context, id string) (*http.Response, error) {
	req, err := NewDeleteCustomersIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetCustomersId(ctx context.Context, id string) (*http.Response, error) {
	req, err := NewGetCustomersIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) PostCustomersIdWithBody(ctx context.Context, id string, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewPostCustomersIdRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) PostCustomersId(ctx context.Context, id string, body PostCustomersIdJSONRequestBody) (*http.Response, error) {
	req, err := NewPostCustomersIdRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) PutCustomersIdWithBody(ctx context.Context, id string, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewPutCustomersIdRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) PutCustomersId(ctx context.Context, id string, body PutCustomersIdJSONRequestBody) (*http.Response, error) {
	req, err := NewPutCustomersIdRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetEmployees(ctx context.Context, params *GetEmployeesParams) (*http.Response, error) {
	req, err := NewGetEmployeesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteEmployeesId(ctx context.Context, id string) (*http.Response, error) {
	req, err := NewDeleteEmployeesIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetEmployeesId(ctx context.Context, id string) (*http.Response, error) {
	req, err := NewGetEmployeesIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) PostEmployeesIdWithBody(ctx context.Context, id string, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewPostEmployeesIdRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) PostEmployeesId(ctx context.Context, id string, body PostEmployeesIdJSONRequestBody) (*http.Response, error) {
	req, err := NewPostEmployeesIdRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) PutEmployeesIdWithBody(ctx context.Context, id string, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewPutEmployeesIdRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) PutEmployeesId(ctx context.Context, id string, body PutEmployeesIdJSONRequestBody) (*http.Response, error) {
	req, err := NewPutEmployeesIdRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetExpenses(ctx context.Context, params *GetExpensesParams) (*http.Response, error) {
	req, err := NewGetExpensesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteExpensesId(ctx context.Context, id string) (*http.Response, error) {
	req, err := NewDeleteExpensesIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetExpensesId(ctx context.Context, id string) (*http.Response, error) {
	req, err := NewGetExpensesIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) PostExpensesIdWithBody(ctx context.Context, id string, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewPostExpensesIdRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) PostExpensesId(ctx context.Context, id string, body PostExpensesIdJSONRequestBody) (*http.Response, error) {
	req, err := NewPostExpensesIdRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) PutExpensesIdWithBody(ctx context.Context, id string, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewPutExpensesIdRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) PutExpensesId(ctx context.Context, id string, body PutExpensesIdJSONRequestBody) (*http.Response, error) {
	req, err := NewPutExpensesIdRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetInvoices(ctx context.Context, params *GetInvoicesParams) (*http.Response, error) {
	req, err := NewGetInvoicesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteInvoicesId(ctx context.Context, id string) (*http.Response, error) {
	req, err := NewDeleteInvoicesIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetInvoicesId(ctx context.Context, id string) (*http.Response, error) {
	req, err := NewGetInvoicesIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) PostInvoicesIdWithBody(ctx context.Context, id string, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewPostInvoicesIdRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) PostInvoicesId(ctx context.Context, id string, body PostInvoicesIdJSONRequestBody) (*http.Response, error) {
	req, err := NewPostInvoicesIdRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) PutInvoicesIdWithBody(ctx context.Context, id string, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewPutInvoicesIdRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) PutInvoicesId(ctx context.Context, id string, body PutInvoicesIdJSONRequestBody) (*http.Response, error) {
	req, err := NewPutInvoicesIdRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetMiscRecords(ctx context.Context, params *GetMiscRecordsParams) (*http.Response, error) {
	req, err := NewGetMiscRecordsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteMiscRecordsId(ctx context.Context, id string) (*http.Response, error) {
	req, err := NewDeleteMiscRecordsIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetMiscRecordsId(ctx context.Context, id string) (*http.Response, error) {
	req, err := NewGetMiscRecordsIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) PostMiscRecordsIdWithBody(ctx context.Context, id string, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewPostMiscRecordsIdRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) PostMiscRecordsId(ctx context.Context, id string, body PostMiscRecordsIdJSONRequestBody) (*http.Response, error) {
	req, err := NewPostMiscRecordsIdRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) PutMiscRecordsIdWithBody(ctx context.Context, id string, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewPutMiscRecordsIdRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) PutMiscRecordsId(ctx context.Context, id string, body PutMiscRecordsIdJSONRequestBody) (*http.Response, error) {
	req, err := NewPutMiscRecordsIdRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetProjects(ctx context.Context, params *GetProjectsParams) (*http.Response, error) {
	req, err := NewGetProjectsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteProjectsId(ctx context.Context, id string) (*http.Response, error) {
	req, err := NewDeleteProjectsIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetProjectsId(ctx context.Context, id string) (*http.Response, error) {
	req, err := NewGetProjectsIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) PostProjectsIdWithBody(ctx context.Context, id string, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewPostProjectsIdRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) PostProjectsId(ctx context.Context, id string, body PostProjectsIdJSONRequestBody) (*http.Response, error) {
	req, err := NewPostProjectsIdRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) PutProjectsIdWithBody(ctx context.Context, id string, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewPutProjectsIdRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) PutProjectsId(ctx context.Context, id string, body PutProjectsIdJSONRequestBody) (*http.Response, error) {
	req, err := NewPutProjectsIdRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

// NewGetCustomersRequest generates requests for GetCustomers
func NewGetCustomersRequest(server string, params *GetCustomersParams) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/customers")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.Query != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "query", *params.Query); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Identifier != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "identifier", *params.Identifier); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteCustomersIdRequest generates requests for DeleteCustomersId
func NewDeleteCustomersIdRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/customers/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetCustomersIdRequest generates requests for GetCustomersId
func NewGetCustomersIdRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/customers/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostCustomersIdRequest calls the generic PostCustomersId builder with application/json body
func NewPostCustomersIdRequest(server string, id string, body PostCustomersIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostCustomersIdRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPostCustomersIdRequestWithBody generates requests for PostCustomersId with any type of body
func NewPostCustomersIdRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/customers/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewPutCustomersIdRequest calls the generic PutCustomersId builder with application/json body
func NewPutCustomersIdRequest(server string, id string, body PutCustomersIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutCustomersIdRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPutCustomersIdRequestWithBody generates requests for PutCustomersId with any type of body
func NewPutCustomersIdRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/customers/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewGetEmployeesRequest generates requests for GetEmployees
func NewGetEmployeesRequest(server string, params *GetEmployeesParams) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/employees")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.Query != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "query", *params.Query); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Identifier != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "identifier", *params.Identifier); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteEmployeesIdRequest generates requests for DeleteEmployeesId
func NewDeleteEmployeesIdRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/employees/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetEmployeesIdRequest generates requests for GetEmployeesId
func NewGetEmployeesIdRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/employees/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostEmployeesIdRequest calls the generic PostEmployeesId builder with application/json body
func NewPostEmployeesIdRequest(server string, id string, body PostEmployeesIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostEmployeesIdRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPostEmployeesIdRequestWithBody generates requests for PostEmployeesId with any type of body
func NewPostEmployeesIdRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/employees/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewPutEmployeesIdRequest calls the generic PutEmployeesId builder with application/json body
func NewPutEmployeesIdRequest(server string, id string, body PutEmployeesIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutEmployeesIdRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPutEmployeesIdRequestWithBody generates requests for PutEmployeesId with any type of body
func NewPutEmployeesIdRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/employees/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewGetExpensesRequest generates requests for GetExpenses
func NewGetExpensesRequest(server string, params *GetExpensesParams) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/expenses")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.Query != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "query", *params.Query); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Identifier != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "identifier", *params.Identifier); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteExpensesIdRequest generates requests for DeleteExpensesId
func NewDeleteExpensesIdRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/expenses/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetExpensesIdRequest generates requests for GetExpensesId
func NewGetExpensesIdRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/expenses/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostExpensesIdRequest calls the generic PostExpensesId builder with application/json body
func NewPostExpensesIdRequest(server string, id string, body PostExpensesIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostExpensesIdRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPostExpensesIdRequestWithBody generates requests for PostExpensesId with any type of body
func NewPostExpensesIdRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/expenses/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewPutExpensesIdRequest calls the generic PutExpensesId builder with application/json body
func NewPutExpensesIdRequest(server string, id string, body PutExpensesIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutExpensesIdRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPutExpensesIdRequestWithBody generates requests for PutExpensesId with any type of body
func NewPutExpensesIdRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/expenses/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewGetInvoicesRequest generates requests for GetInvoices
func NewGetInvoicesRequest(server string, params *GetInvoicesParams) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/invoices")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.Query != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "query", *params.Query); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Identifier != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "identifier", *params.Identifier); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteInvoicesIdRequest generates requests for DeleteInvoicesId
func NewDeleteInvoicesIdRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/invoices/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetInvoicesIdRequest generates requests for GetInvoicesId
func NewGetInvoicesIdRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/invoices/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostInvoicesIdRequest calls the generic PostInvoicesId builder with application/json body
func NewPostInvoicesIdRequest(server string, id string, body PostInvoicesIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostInvoicesIdRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPostInvoicesIdRequestWithBody generates requests for PostInvoicesId with any type of body
func NewPostInvoicesIdRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/invoices/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewPutInvoicesIdRequest calls the generic PutInvoicesId builder with application/json body
func NewPutInvoicesIdRequest(server string, id string, body PutInvoicesIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutInvoicesIdRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPutInvoicesIdRequestWithBody generates requests for PutInvoicesId with any type of body
func NewPutInvoicesIdRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/invoices/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewGetMiscRecordsRequest generates requests for GetMiscRecords
func NewGetMiscRecordsRequest(server string, params *GetMiscRecordsParams) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/misc_records")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.Query != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "query", *params.Query); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Identifier != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "identifier", *params.Identifier); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteMiscRecordsIdRequest generates requests for DeleteMiscRecordsId
func NewDeleteMiscRecordsIdRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/misc_records/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetMiscRecordsIdRequest generates requests for GetMiscRecordsId
func NewGetMiscRecordsIdRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/misc_records/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostMiscRecordsIdRequest calls the generic PostMiscRecordsId builder with application/json body
func NewPostMiscRecordsIdRequest(server string, id string, body PostMiscRecordsIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostMiscRecordsIdRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPostMiscRecordsIdRequestWithBody generates requests for PostMiscRecordsId with any type of body
func NewPostMiscRecordsIdRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/misc_records/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewPutMiscRecordsIdRequest calls the generic PutMiscRecordsId builder with application/json body
func NewPutMiscRecordsIdRequest(server string, id string, body PutMiscRecordsIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutMiscRecordsIdRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPutMiscRecordsIdRequestWithBody generates requests for PutMiscRecordsId with any type of body
func NewPutMiscRecordsIdRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/misc_records/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewGetProjectsRequest generates requests for GetProjects
func NewGetProjectsRequest(server string, params *GetProjectsParams) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/projects")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.Query != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "query", *params.Query); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Identifier != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "identifier", *params.Identifier); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteProjectsIdRequest generates requests for DeleteProjectsId
func NewDeleteProjectsIdRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/projects/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetProjectsIdRequest generates requests for GetProjectsId
func NewGetProjectsIdRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/projects/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostProjectsIdRequest calls the generic PostProjectsId builder with application/json body
func NewPostProjectsIdRequest(server string, id string, body PostProjectsIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostProjectsIdRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPostProjectsIdRequestWithBody generates requests for PostProjectsId with any type of body
func NewPostProjectsIdRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/projects/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewPutProjectsIdRequest calls the generic PutProjectsId builder with application/json body
func NewPutProjectsIdRequest(server string, id string, body PutProjectsIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutProjectsIdRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPutProjectsIdRequestWithBody generates requests for PutProjectsId with any type of body
func NewPutProjectsIdRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/projects/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetCustomers request
	GetCustomersWithResponse(ctx context.Context, params *GetCustomersParams) (*GetCustomersResponse, error)

	// DeleteCustomersId request
	DeleteCustomersIdWithResponse(ctx context.Context, id string) (*DeleteCustomersIdResponse, error)

	// GetCustomersId request
	GetCustomersIdWithResponse(ctx context.Context, id string) (*GetCustomersIdResponse, error)

	// PostCustomersId request  with any body
	PostCustomersIdWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*PostCustomersIdResponse, error)

	PostCustomersIdWithResponse(ctx context.Context, id string, body PostCustomersIdJSONRequestBody) (*PostCustomersIdResponse, error)

	// PutCustomersId request  with any body
	PutCustomersIdWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*PutCustomersIdResponse, error)

	PutCustomersIdWithResponse(ctx context.Context, id string, body PutCustomersIdJSONRequestBody) (*PutCustomersIdResponse, error)

	// GetEmployees request
	GetEmployeesWithResponse(ctx context.Context, params *GetEmployeesParams) (*GetEmployeesResponse, error)

	// DeleteEmployeesId request
	DeleteEmployeesIdWithResponse(ctx context.Context, id string) (*DeleteEmployeesIdResponse, error)

	// GetEmployeesId request
	GetEmployeesIdWithResponse(ctx context.Context, id string) (*GetEmployeesIdResponse, error)

	// PostEmployeesId request  with any body
	PostEmployeesIdWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*PostEmployeesIdResponse, error)

	PostEmployeesIdWithResponse(ctx context.Context, id string, body PostEmployeesIdJSONRequestBody) (*PostEmployeesIdResponse, error)

	// PutEmployeesId request  with any body
	PutEmployeesIdWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*PutEmployeesIdResponse, error)

	PutEmployeesIdWithResponse(ctx context.Context, id string, body PutEmployeesIdJSONRequestBody) (*PutEmployeesIdResponse, error)

	// GetExpenses request
	GetExpensesWithResponse(ctx context.Context, params *GetExpensesParams) (*GetExpensesResponse, error)

	// DeleteExpensesId request
	DeleteExpensesIdWithResponse(ctx context.Context, id string) (*DeleteExpensesIdResponse, error)

	// GetExpensesId request
	GetExpensesIdWithResponse(ctx context.Context, id string) (*GetExpensesIdResponse, error)

	// PostExpensesId request  with any body
	PostExpensesIdWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*PostExpensesIdResponse, error)

	PostExpensesIdWithResponse(ctx context.Context, id string, body PostExpensesIdJSONRequestBody) (*PostExpensesIdResponse, error)

	// PutExpensesId request  with any body
	PutExpensesIdWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*PutExpensesIdResponse, error)

	PutExpensesIdWithResponse(ctx context.Context, id string, body PutExpensesIdJSONRequestBody) (*PutExpensesIdResponse, error)

	// GetInvoices request
	GetInvoicesWithResponse(ctx context.Context, params *GetInvoicesParams) (*GetInvoicesResponse, error)

	// DeleteInvoicesId request
	DeleteInvoicesIdWithResponse(ctx context.Context, id string) (*DeleteInvoicesIdResponse, error)

	// GetInvoicesId request
	GetInvoicesIdWithResponse(ctx context.Context, id string) (*GetInvoicesIdResponse, error)

	// PostInvoicesId request  with any body
	PostInvoicesIdWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*PostInvoicesIdResponse, error)

	PostInvoicesIdWithResponse(ctx context.Context, id string, body PostInvoicesIdJSONRequestBody) (*PostInvoicesIdResponse, error)

	// PutInvoicesId request  with any body
	PutInvoicesIdWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*PutInvoicesIdResponse, error)

	PutInvoicesIdWithResponse(ctx context.Context, id string, body PutInvoicesIdJSONRequestBody) (*PutInvoicesIdResponse, error)

	// GetMiscRecords request
	GetMiscRecordsWithResponse(ctx context.Context, params *GetMiscRecordsParams) (*GetMiscRecordsResponse, error)

	// DeleteMiscRecordsId request
	DeleteMiscRecordsIdWithResponse(ctx context.Context, id string) (*DeleteMiscRecordsIdResponse, error)

	// GetMiscRecordsId request
	GetMiscRecordsIdWithResponse(ctx context.Context, id string) (*GetMiscRecordsIdResponse, error)

	// PostMiscRecordsId request  with any body
	PostMiscRecordsIdWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*PostMiscRecordsIdResponse, error)

	PostMiscRecordsIdWithResponse(ctx context.Context, id string, body PostMiscRecordsIdJSONRequestBody) (*PostMiscRecordsIdResponse, error)

	// PutMiscRecordsId request  with any body
	PutMiscRecordsIdWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*PutMiscRecordsIdResponse, error)

	PutMiscRecordsIdWithResponse(ctx context.Context, id string, body PutMiscRecordsIdJSONRequestBody) (*PutMiscRecordsIdResponse, error)

	// GetProjects request
	GetProjectsWithResponse(ctx context.Context, params *GetProjectsParams) (*GetProjectsResponse, error)

	// DeleteProjectsId request
	DeleteProjectsIdWithResponse(ctx context.Context, id string) (*DeleteProjectsIdResponse, error)

	// GetProjectsId request
	GetProjectsIdWithResponse(ctx context.Context, id string) (*GetProjectsIdResponse, error)

	// PostProjectsId request  with any body
	PostProjectsIdWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*PostProjectsIdResponse, error)

	PostProjectsIdWithResponse(ctx context.Context, id string, body PostProjectsIdJSONRequestBody) (*PostProjectsIdResponse, error)

	// PutProjectsId request  with any body
	PutProjectsIdWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*PutProjectsIdResponse, error)

	PutProjectsIdWithResponse(ctx context.Context, id string, body PutProjectsIdJSONRequestBody) (*PutProjectsIdResponse, error)
}

type GetCustomersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Parties
}

// Status returns HTTPResponse.Status
func (r GetCustomersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCustomersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteCustomersIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteCustomersIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteCustomersIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCustomersIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Party
}

// Status returns HTTPResponse.Status
func (r GetCustomersIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCustomersIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostCustomersIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostCustomersIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostCustomersIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutCustomersIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutCustomersIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutCustomersIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetEmployeesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Parties
}

// Status returns HTTPResponse.Status
func (r GetEmployeesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetEmployeesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteEmployeesIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteEmployeesIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteEmployeesIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetEmployeesIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Party
}

// Status returns HTTPResponse.Status
func (r GetEmployeesIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetEmployeesIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostEmployeesIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostEmployeesIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostEmployeesIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutEmployeesIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutEmployeesIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutEmployeesIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetExpensesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Expenses
}

// Status returns HTTPResponse.Status
func (r GetExpensesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetExpensesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteExpensesIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteExpensesIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteExpensesIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetExpensesIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Expense
}

// Status returns HTTPResponse.Status
func (r GetExpensesIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetExpensesIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostExpensesIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostExpensesIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostExpensesIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutExpensesIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutExpensesIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutExpensesIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetInvoicesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Invoices
}

// Status returns HTTPResponse.Status
func (r GetInvoicesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetInvoicesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteInvoicesIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteInvoicesIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteInvoicesIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetInvoicesIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Invoice
}

// Status returns HTTPResponse.Status
func (r GetInvoicesIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetInvoicesIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostInvoicesIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostInvoicesIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostInvoicesIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutInvoicesIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutInvoicesIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutInvoicesIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetMiscRecordsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *MiscRecords
}

// Status returns HTTPResponse.Status
func (r GetMiscRecordsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetMiscRecordsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteMiscRecordsIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteMiscRecordsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteMiscRecordsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetMiscRecordsIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *MiscRecord
}

// Status returns HTTPResponse.Status
func (r GetMiscRecordsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetMiscRecordsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostMiscRecordsIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostMiscRecordsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostMiscRecordsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutMiscRecordsIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutMiscRecordsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutMiscRecordsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetProjectsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Projects
}

// Status returns HTTPResponse.Status
func (r GetProjectsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetProjectsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteProjectsIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteProjectsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteProjectsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetProjectsIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Project
}

// Status returns HTTPResponse.Status
func (r GetProjectsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetProjectsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostProjectsIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostProjectsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostProjectsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutProjectsIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutProjectsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutProjectsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetCustomersWithResponse request returning *GetCustomersResponse
func (c *ClientWithResponses) GetCustomersWithResponse(ctx context.Context, params *GetCustomersParams) (*GetCustomersResponse, error) {
	rsp, err := c.GetCustomers(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseGetCustomersResponse(rsp)
}

// DeleteCustomersIdWithResponse request returning *DeleteCustomersIdResponse
func (c *ClientWithResponses) DeleteCustomersIdWithResponse(ctx context.Context, id string) (*DeleteCustomersIdResponse, error) {
	rsp, err := c.DeleteCustomersId(ctx, id)
	if err != nil {
		return nil, err
	}
	return ParseDeleteCustomersIdResponse(rsp)
}

// GetCustomersIdWithResponse request returning *GetCustomersIdResponse
func (c *ClientWithResponses) GetCustomersIdWithResponse(ctx context.Context, id string) (*GetCustomersIdResponse, error) {
	rsp, err := c.GetCustomersId(ctx, id)
	if err != nil {
		return nil, err
	}
	return ParseGetCustomersIdResponse(rsp)
}

// PostCustomersIdWithBodyWithResponse request with arbitrary body returning *PostCustomersIdResponse
func (c *ClientWithResponses) PostCustomersIdWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*PostCustomersIdResponse, error) {
	rsp, err := c.PostCustomersIdWithBody(ctx, id, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParsePostCustomersIdResponse(rsp)
}

func (c *ClientWithResponses) PostCustomersIdWithResponse(ctx context.Context, id string, body PostCustomersIdJSONRequestBody) (*PostCustomersIdResponse, error) {
	rsp, err := c.PostCustomersId(ctx, id, body)
	if err != nil {
		return nil, err
	}
	return ParsePostCustomersIdResponse(rsp)
}

// PutCustomersIdWithBodyWithResponse request with arbitrary body returning *PutCustomersIdResponse
func (c *ClientWithResponses) PutCustomersIdWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*PutCustomersIdResponse, error) {
	rsp, err := c.PutCustomersIdWithBody(ctx, id, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParsePutCustomersIdResponse(rsp)
}

func (c *ClientWithResponses) PutCustomersIdWithResponse(ctx context.Context, id string, body PutCustomersIdJSONRequestBody) (*PutCustomersIdResponse, error) {
	rsp, err := c.PutCustomersId(ctx, id, body)
	if err != nil {
		return nil, err
	}
	return ParsePutCustomersIdResponse(rsp)
}

// GetEmployeesWithResponse request returning *GetEmployeesResponse
func (c *ClientWithResponses) GetEmployeesWithResponse(ctx context.Context, params *GetEmployeesParams) (*GetEmployeesResponse, error) {
	rsp, err := c.GetEmployees(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseGetEmployeesResponse(rsp)
}

// DeleteEmployeesIdWithResponse request returning *DeleteEmployeesIdResponse
func (c *ClientWithResponses) DeleteEmployeesIdWithResponse(ctx context.Context, id string) (*DeleteEmployeesIdResponse, error) {
	rsp, err := c.DeleteEmployeesId(ctx, id)
	if err != nil {
		return nil, err
	}
	return ParseDeleteEmployeesIdResponse(rsp)
}

// GetEmployeesIdWithResponse request returning *GetEmployeesIdResponse
func (c *ClientWithResponses) GetEmployeesIdWithResponse(ctx context.Context, id string) (*GetEmployeesIdResponse, error) {
	rsp, err := c.GetEmployeesId(ctx, id)
	if err != nil {
		return nil, err
	}
	return ParseGetEmployeesIdResponse(rsp)
}

// PostEmployeesIdWithBodyWithResponse request with arbitrary body returning *PostEmployeesIdResponse
func (c *ClientWithResponses) PostEmployeesIdWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*PostEmployeesIdResponse, error) {
	rsp, err := c.PostEmployeesIdWithBody(ctx, id, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParsePostEmployeesIdResponse(rsp)
}

func (c *ClientWithResponses) PostEmployeesIdWithResponse(ctx context.Context, id string, body PostEmployeesIdJSONRequestBody) (*PostEmployeesIdResponse, error) {
	rsp, err := c.PostEmployeesId(ctx, id, body)
	if err != nil {
		return nil, err
	}
	return ParsePostEmployeesIdResponse(rsp)
}

// PutEmployeesIdWithBodyWithResponse request with arbitrary body returning *PutEmployeesIdResponse
func (c *ClientWithResponses) PutEmployeesIdWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*PutEmployeesIdResponse, error) {
	rsp, err := c.PutEmployeesIdWithBody(ctx, id, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParsePutEmployeesIdResponse(rsp)
}

func (c *ClientWithResponses) PutEmployeesIdWithResponse(ctx context.Context, id string, body PutEmployeesIdJSONRequestBody) (*PutEmployeesIdResponse, error) {
	rsp, err := c.PutEmployeesId(ctx, id, body)
	if err != nil {
		return nil, err
	}
	return ParsePutEmployeesIdResponse(rsp)
}

// GetExpensesWithResponse request returning *GetExpensesResponse
func (c *ClientWithResponses) GetExpensesWithResponse(ctx context.Context, params *GetExpensesParams) (*GetExpensesResponse, error) {
	rsp, err := c.GetExpenses(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseGetExpensesResponse(rsp)
}

// DeleteExpensesIdWithResponse request returning *DeleteExpensesIdResponse
func (c *ClientWithResponses) DeleteExpensesIdWithResponse(ctx context.Context, id string) (*DeleteExpensesIdResponse, error) {
	rsp, err := c.DeleteExpensesId(ctx, id)
	if err != nil {
		return nil, err
	}
	return ParseDeleteExpensesIdResponse(rsp)
}

// GetExpensesIdWithResponse request returning *GetExpensesIdResponse
func (c *ClientWithResponses) GetExpensesIdWithResponse(ctx context.Context, id string) (*GetExpensesIdResponse, error) {
	rsp, err := c.GetExpensesId(ctx, id)
	if err != nil {
		return nil, err
	}
	return ParseGetExpensesIdResponse(rsp)
}

// PostExpensesIdWithBodyWithResponse request with arbitrary body returning *PostExpensesIdResponse
func (c *ClientWithResponses) PostExpensesIdWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*PostExpensesIdResponse, error) {
	rsp, err := c.PostExpensesIdWithBody(ctx, id, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParsePostExpensesIdResponse(rsp)
}

func (c *ClientWithResponses) PostExpensesIdWithResponse(ctx context.Context, id string, body PostExpensesIdJSONRequestBody) (*PostExpensesIdResponse, error) {
	rsp, err := c.PostExpensesId(ctx, id, body)
	if err != nil {
		return nil, err
	}
	return ParsePostExpensesIdResponse(rsp)
}

// PutExpensesIdWithBodyWithResponse request with arbitrary body returning *PutExpensesIdResponse
func (c *ClientWithResponses) PutExpensesIdWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*PutExpensesIdResponse, error) {
	rsp, err := c.PutExpensesIdWithBody(ctx, id, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParsePutExpensesIdResponse(rsp)
}

func (c *ClientWithResponses) PutExpensesIdWithResponse(ctx context.Context, id string, body PutExpensesIdJSONRequestBody) (*PutExpensesIdResponse, error) {
	rsp, err := c.PutExpensesId(ctx, id, body)
	if err != nil {
		return nil, err
	}
	return ParsePutExpensesIdResponse(rsp)
}

// GetInvoicesWithResponse request returning *GetInvoicesResponse
func (c *ClientWithResponses) GetInvoicesWithResponse(ctx context.Context, params *GetInvoicesParams) (*GetInvoicesResponse, error) {
	rsp, err := c.GetInvoices(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseGetInvoicesResponse(rsp)
}

// DeleteInvoicesIdWithResponse request returning *DeleteInvoicesIdResponse
func (c *ClientWithResponses) DeleteInvoicesIdWithResponse(ctx context.Context, id string) (*DeleteInvoicesIdResponse, error) {
	rsp, err := c.DeleteInvoicesId(ctx, id)
	if err != nil {
		return nil, err
	}
	return ParseDeleteInvoicesIdResponse(rsp)
}

// GetInvoicesIdWithResponse request returning *GetInvoicesIdResponse
func (c *ClientWithResponses) GetInvoicesIdWithResponse(ctx context.Context, id string) (*GetInvoicesIdResponse, error) {
	rsp, err := c.GetInvoicesId(ctx, id)
	if err != nil {
		return nil, err
	}
	return ParseGetInvoicesIdResponse(rsp)
}

// PostInvoicesIdWithBodyWithResponse request with arbitrary body returning *PostInvoicesIdResponse
func (c *ClientWithResponses) PostInvoicesIdWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*PostInvoicesIdResponse, error) {
	rsp, err := c.PostInvoicesIdWithBody(ctx, id, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParsePostInvoicesIdResponse(rsp)
}

func (c *ClientWithResponses) PostInvoicesIdWithResponse(ctx context.Context, id string, body PostInvoicesIdJSONRequestBody) (*PostInvoicesIdResponse, error) {
	rsp, err := c.PostInvoicesId(ctx, id, body)
	if err != nil {
		return nil, err
	}
	return ParsePostInvoicesIdResponse(rsp)
}

// PutInvoicesIdWithBodyWithResponse request with arbitrary body returning *PutInvoicesIdResponse
func (c *ClientWithResponses) PutInvoicesIdWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*PutInvoicesIdResponse, error) {
	rsp, err := c.PutInvoicesIdWithBody(ctx, id, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParsePutInvoicesIdResponse(rsp)
}

func (c *ClientWithResponses) PutInvoicesIdWithResponse(ctx context.Context, id string, body PutInvoicesIdJSONRequestBody) (*PutInvoicesIdResponse, error) {
	rsp, err := c.PutInvoicesId(ctx, id, body)
	if err != nil {
		return nil, err
	}
	return ParsePutInvoicesIdResponse(rsp)
}

// GetMiscRecordsWithResponse request returning *GetMiscRecordsResponse
func (c *ClientWithResponses) GetMiscRecordsWithResponse(ctx context.Context, params *GetMiscRecordsParams) (*GetMiscRecordsResponse, error) {
	rsp, err := c.GetMiscRecords(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseGetMiscRecordsResponse(rsp)
}

// DeleteMiscRecordsIdWithResponse request returning *DeleteMiscRecordsIdResponse
func (c *ClientWithResponses) DeleteMiscRecordsIdWithResponse(ctx context.Context, id string) (*DeleteMiscRecordsIdResponse, error) {
	rsp, err := c.DeleteMiscRecordsId(ctx, id)
	if err != nil {
		return nil, err
	}
	return ParseDeleteMiscRecordsIdResponse(rsp)
}

// GetMiscRecordsIdWithResponse request returning *GetMiscRecordsIdResponse
func (c *ClientWithResponses) GetMiscRecordsIdWithResponse(ctx context.Context, id string) (*GetMiscRecordsIdResponse, error) {
	rsp, err := c.GetMiscRecordsId(ctx, id)
	if err != nil {
		return nil, err
	}
	return ParseGetMiscRecordsIdResponse(rsp)
}

// PostMiscRecordsIdWithBodyWithResponse request with arbitrary body returning *PostMiscRecordsIdResponse
func (c *ClientWithResponses) PostMiscRecordsIdWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*PostMiscRecordsIdResponse, error) {
	rsp, err := c.PostMiscRecordsIdWithBody(ctx, id, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParsePostMiscRecordsIdResponse(rsp)
}

func (c *ClientWithResponses) PostMiscRecordsIdWithResponse(ctx context.Context, id string, body PostMiscRecordsIdJSONRequestBody) (*PostMiscRecordsIdResponse, error) {
	rsp, err := c.PostMiscRecordsId(ctx, id, body)
	if err != nil {
		return nil, err
	}
	return ParsePostMiscRecordsIdResponse(rsp)
}

// PutMiscRecordsIdWithBodyWithResponse request with arbitrary body returning *PutMiscRecordsIdResponse
func (c *ClientWithResponses) PutMiscRecordsIdWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*PutMiscRecordsIdResponse, error) {
	rsp, err := c.PutMiscRecordsIdWithBody(ctx, id, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParsePutMiscRecordsIdResponse(rsp)
}

func (c *ClientWithResponses) PutMiscRecordsIdWithResponse(ctx context.Context, id string, body PutMiscRecordsIdJSONRequestBody) (*PutMiscRecordsIdResponse, error) {
	rsp, err := c.PutMiscRecordsId(ctx, id, body)
	if err != nil {
		return nil, err
	}
	return ParsePutMiscRecordsIdResponse(rsp)
}

// GetProjectsWithResponse request returning *GetProjectsResponse
func (c *ClientWithResponses) GetProjectsWithResponse(ctx context.Context, params *GetProjectsParams) (*GetProjectsResponse, error) {
	rsp, err := c.GetProjects(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseGetProjectsResponse(rsp)
}

// DeleteProjectsIdWithResponse request returning *DeleteProjectsIdResponse
func (c *ClientWithResponses) DeleteProjectsIdWithResponse(ctx context.Context, id string) (*DeleteProjectsIdResponse, error) {
	rsp, err := c.DeleteProjectsId(ctx, id)
	if err != nil {
		return nil, err
	}
	return ParseDeleteProjectsIdResponse(rsp)
}

// GetProjectsIdWithResponse request returning *GetProjectsIdResponse
func (c *ClientWithResponses) GetProjectsIdWithResponse(ctx context.Context, id string) (*GetProjectsIdResponse, error) {
	rsp, err := c.GetProjectsId(ctx, id)
	if err != nil {
		return nil, err
	}
	return ParseGetProjectsIdResponse(rsp)
}

// PostProjectsIdWithBodyWithResponse request with arbitrary body returning *PostProjectsIdResponse
func (c *ClientWithResponses) PostProjectsIdWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*PostProjectsIdResponse, error) {
	rsp, err := c.PostProjectsIdWithBody(ctx, id, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParsePostProjectsIdResponse(rsp)
}

func (c *ClientWithResponses) PostProjectsIdWithResponse(ctx context.Context, id string, body PostProjectsIdJSONRequestBody) (*PostProjectsIdResponse, error) {
	rsp, err := c.PostProjectsId(ctx, id, body)
	if err != nil {
		return nil, err
	}
	return ParsePostProjectsIdResponse(rsp)
}

// PutProjectsIdWithBodyWithResponse request with arbitrary body returning *PutProjectsIdResponse
func (c *ClientWithResponses) PutProjectsIdWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*PutProjectsIdResponse, error) {
	rsp, err := c.PutProjectsIdWithBody(ctx, id, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParsePutProjectsIdResponse(rsp)
}

func (c *ClientWithResponses) PutProjectsIdWithResponse(ctx context.Context, id string, body PutProjectsIdJSONRequestBody) (*PutProjectsIdResponse, error) {
	rsp, err := c.PutProjectsId(ctx, id, body)
	if err != nil {
		return nil, err
	}
	return ParsePutProjectsIdResponse(rsp)
}

// ParseGetCustomersResponse parses an HTTP response from a GetCustomersWithResponse call
func ParseGetCustomersResponse(rsp *http.Response) (*GetCustomersResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetCustomersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Parties
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteCustomersIdResponse parses an HTTP response from a DeleteCustomersIdWithResponse call
func ParseDeleteCustomersIdResponse(rsp *http.Response) (*DeleteCustomersIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &DeleteCustomersIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetCustomersIdResponse parses an HTTP response from a GetCustomersIdWithResponse call
func ParseGetCustomersIdResponse(rsp *http.Response) (*GetCustomersIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetCustomersIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Party
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostCustomersIdResponse parses an HTTP response from a PostCustomersIdWithResponse call
func ParsePostCustomersIdResponse(rsp *http.Response) (*PostCustomersIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostCustomersIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParsePutCustomersIdResponse parses an HTTP response from a PutCustomersIdWithResponse call
func ParsePutCustomersIdResponse(rsp *http.Response) (*PutCustomersIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PutCustomersIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetEmployeesResponse parses an HTTP response from a GetEmployeesWithResponse call
func ParseGetEmployeesResponse(rsp *http.Response) (*GetEmployeesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetEmployeesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Parties
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteEmployeesIdResponse parses an HTTP response from a DeleteEmployeesIdWithResponse call
func ParseDeleteEmployeesIdResponse(rsp *http.Response) (*DeleteEmployeesIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &DeleteEmployeesIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetEmployeesIdResponse parses an HTTP response from a GetEmployeesIdWithResponse call
func ParseGetEmployeesIdResponse(rsp *http.Response) (*GetEmployeesIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetEmployeesIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Party
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostEmployeesIdResponse parses an HTTP response from a PostEmployeesIdWithResponse call
func ParsePostEmployeesIdResponse(rsp *http.Response) (*PostEmployeesIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostEmployeesIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParsePutEmployeesIdResponse parses an HTTP response from a PutEmployeesIdWithResponse call
func ParsePutEmployeesIdResponse(rsp *http.Response) (*PutEmployeesIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PutEmployeesIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetExpensesResponse parses an HTTP response from a GetExpensesWithResponse call
func ParseGetExpensesResponse(rsp *http.Response) (*GetExpensesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetExpensesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Expenses
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteExpensesIdResponse parses an HTTP response from a DeleteExpensesIdWithResponse call
func ParseDeleteExpensesIdResponse(rsp *http.Response) (*DeleteExpensesIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &DeleteExpensesIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetExpensesIdResponse parses an HTTP response from a GetExpensesIdWithResponse call
func ParseGetExpensesIdResponse(rsp *http.Response) (*GetExpensesIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetExpensesIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Expense
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostExpensesIdResponse parses an HTTP response from a PostExpensesIdWithResponse call
func ParsePostExpensesIdResponse(rsp *http.Response) (*PostExpensesIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostExpensesIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParsePutExpensesIdResponse parses an HTTP response from a PutExpensesIdWithResponse call
func ParsePutExpensesIdResponse(rsp *http.Response) (*PutExpensesIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PutExpensesIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetInvoicesResponse parses an HTTP response from a GetInvoicesWithResponse call
func ParseGetInvoicesResponse(rsp *http.Response) (*GetInvoicesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetInvoicesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Invoices
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteInvoicesIdResponse parses an HTTP response from a DeleteInvoicesIdWithResponse call
func ParseDeleteInvoicesIdResponse(rsp *http.Response) (*DeleteInvoicesIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &DeleteInvoicesIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetInvoicesIdResponse parses an HTTP response from a GetInvoicesIdWithResponse call
func ParseGetInvoicesIdResponse(rsp *http.Response) (*GetInvoicesIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetInvoicesIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Invoice
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostInvoicesIdResponse parses an HTTP response from a PostInvoicesIdWithResponse call
func ParsePostInvoicesIdResponse(rsp *http.Response) (*PostInvoicesIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostInvoicesIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParsePutInvoicesIdResponse parses an HTTP response from a PutInvoicesIdWithResponse call
func ParsePutInvoicesIdResponse(rsp *http.Response) (*PutInvoicesIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PutInvoicesIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetMiscRecordsResponse parses an HTTP response from a GetMiscRecordsWithResponse call
func ParseGetMiscRecordsResponse(rsp *http.Response) (*GetMiscRecordsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetMiscRecordsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest MiscRecords
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteMiscRecordsIdResponse parses an HTTP response from a DeleteMiscRecordsIdWithResponse call
func ParseDeleteMiscRecordsIdResponse(rsp *http.Response) (*DeleteMiscRecordsIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &DeleteMiscRecordsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetMiscRecordsIdResponse parses an HTTP response from a GetMiscRecordsIdWithResponse call
func ParseGetMiscRecordsIdResponse(rsp *http.Response) (*GetMiscRecordsIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetMiscRecordsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest MiscRecord
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostMiscRecordsIdResponse parses an HTTP response from a PostMiscRecordsIdWithResponse call
func ParsePostMiscRecordsIdResponse(rsp *http.Response) (*PostMiscRecordsIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostMiscRecordsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParsePutMiscRecordsIdResponse parses an HTTP response from a PutMiscRecordsIdWithResponse call
func ParsePutMiscRecordsIdResponse(rsp *http.Response) (*PutMiscRecordsIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PutMiscRecordsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetProjectsResponse parses an HTTP response from a GetProjectsWithResponse call
func ParseGetProjectsResponse(rsp *http.Response) (*GetProjectsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetProjectsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Projects
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteProjectsIdResponse parses an HTTP response from a DeleteProjectsIdWithResponse call
func ParseDeleteProjectsIdResponse(rsp *http.Response) (*DeleteProjectsIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &DeleteProjectsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetProjectsIdResponse parses an HTTP response from a GetProjectsIdWithResponse call
func ParseGetProjectsIdResponse(rsp *http.Response) (*GetProjectsIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetProjectsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Project
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostProjectsIdResponse parses an HTTP response from a PostProjectsIdWithResponse call
func ParsePostProjectsIdResponse(rsp *http.Response) (*PostProjectsIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostProjectsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParsePutProjectsIdResponse parses an HTTP response from a PutProjectsIdWithResponse call
func ParsePutProjectsIdResponse(rsp *http.Response) (*PutProjectsIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PutProjectsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get all customers
	// (GET /customers)
	GetCustomers(ctx echo.Context, params GetCustomersParams) error
	// Remove a customer
	// (DELETE /customers/{id})
	DeleteCustomersId(ctx echo.Context, id string) error
	// Get a customer by ID
	// (GET /customers/{id})
	GetCustomersId(ctx echo.Context, id string) error
	// Add a customer
	// (POST /customers/{id})
	PostCustomersId(ctx echo.Context, id string) error
	// Update a customer
	// (PUT /customers/{id})
	PutCustomersId(ctx echo.Context, id string) error
	// Get all employees
	// (GET /employees)
	GetEmployees(ctx echo.Context, params GetEmployeesParams) error
	// Remove a employee
	// (DELETE /employees/{id})
	DeleteEmployeesId(ctx echo.Context, id string) error
	// Get a employee by ID
	// (GET /employees/{id})
	GetEmployeesId(ctx echo.Context, id string) error
	// Add a employee
	// (POST /employees/{id})
	PostEmployeesId(ctx echo.Context, id string) error
	// Update a employee
	// (PUT /employees/{id})
	PutEmployeesId(ctx echo.Context, id string) error
	// Get all Expenses
	// (GET /expenses)
	GetExpenses(ctx echo.Context, params GetExpensesParams) error
	// Remove a Expense
	// (DELETE /expenses/{id})
	DeleteExpensesId(ctx echo.Context, id string) error
	// Get a Expense by ID
	// (GET /expenses/{id})
	GetExpensesId(ctx echo.Context, id string) error
	// Add a Expense
	// (POST /expenses/{id})
	PostExpensesId(ctx echo.Context, id string) error
	// Update a Expense
	// (PUT /expenses/{id})
	PutExpensesId(ctx echo.Context, id string) error
	// Get all invoices
	// (GET /invoices)
	GetInvoices(ctx echo.Context, params GetInvoicesParams) error
	// Remove a Invoice
	// (DELETE /invoices/{id})
	DeleteInvoicesId(ctx echo.Context, id string) error
	// Get a Invoice by ID
	// (GET /invoices/{id})
	GetInvoicesId(ctx echo.Context, id string) error
	// Add a Invoice
	// (POST /invoices/{id})
	PostInvoicesId(ctx echo.Context, id string) error
	// Update a Invoice
	// (PUT /invoices/{id})
	PutInvoicesId(ctx echo.Context, id string) error
	// Get all Miscellaneous Records
	// (GET /misc_records)
	GetMiscRecords(ctx echo.Context, params GetMiscRecordsParams) error
	// Remove a Miscellaneous Record
	// (DELETE /misc_records/{id})
	DeleteMiscRecordsId(ctx echo.Context, id string) error
	// Get a Miscellaneous Record by ID
	// (GET /misc_records/{id})
	GetMiscRecordsId(ctx echo.Context, id string) error
	// Add a Miscellaneous Record
	// (POST /misc_records/{id})
	PostMiscRecordsId(ctx echo.Context, id string) error
	// Update a Miscellaneous Record
	// (PUT /misc_records/{id})
	PutMiscRecordsId(ctx echo.Context, id string) error
	// Get all Projects
	// (GET /projects)
	GetProjects(ctx echo.Context, params GetProjectsParams) error
	// Remove a Project
	// (DELETE /projects/{id})
	DeleteProjectsId(ctx echo.Context, id string) error
	// Get a Project by ID
	// (GET /projects/{id})
	GetProjectsId(ctx echo.Context, id string) error
	// Add a Project
	// (POST /projects/{id})
	PostProjectsId(ctx echo.Context, id string) error
	// Update a Project
	// (PUT /projects/{id})
	PutProjectsId(ctx echo.Context, id string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetCustomers converts echo context to params.
func (w *ServerInterfaceWrapper) GetCustomers(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetCustomersParams
	// ------------- Optional query parameter "query" -------------

	err = runtime.BindQueryParameter("form", true, false, "query", ctx.QueryParams(), &params.Query)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter query: %s", err))
	}

	// ------------- Optional query parameter "identifier" -------------

	err = runtime.BindQueryParameter("form", true, false, "identifier", ctx.QueryParams(), &params.Identifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter identifier: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetCustomers(ctx, params)
	return err
}

// DeleteCustomersId converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteCustomersId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteCustomersId(ctx, id)
	return err
}

// GetCustomersId converts echo context to params.
func (w *ServerInterfaceWrapper) GetCustomersId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetCustomersId(ctx, id)
	return err
}

// PostCustomersId converts echo context to params.
func (w *ServerInterfaceWrapper) PostCustomersId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostCustomersId(ctx, id)
	return err
}

// PutCustomersId converts echo context to params.
func (w *ServerInterfaceWrapper) PutCustomersId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutCustomersId(ctx, id)
	return err
}

// GetEmployees converts echo context to params.
func (w *ServerInterfaceWrapper) GetEmployees(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetEmployeesParams
	// ------------- Optional query parameter "query" -------------

	err = runtime.BindQueryParameter("form", true, false, "query", ctx.QueryParams(), &params.Query)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter query: %s", err))
	}

	// ------------- Optional query parameter "identifier" -------------

	err = runtime.BindQueryParameter("form", true, false, "identifier", ctx.QueryParams(), &params.Identifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter identifier: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetEmployees(ctx, params)
	return err
}

// DeleteEmployeesId converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteEmployeesId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteEmployeesId(ctx, id)
	return err
}

// GetEmployeesId converts echo context to params.
func (w *ServerInterfaceWrapper) GetEmployeesId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetEmployeesId(ctx, id)
	return err
}

// PostEmployeesId converts echo context to params.
func (w *ServerInterfaceWrapper) PostEmployeesId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostEmployeesId(ctx, id)
	return err
}

// PutEmployeesId converts echo context to params.
func (w *ServerInterfaceWrapper) PutEmployeesId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutEmployeesId(ctx, id)
	return err
}

// GetExpenses converts echo context to params.
func (w *ServerInterfaceWrapper) GetExpenses(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetExpensesParams
	// ------------- Optional query parameter "query" -------------

	err = runtime.BindQueryParameter("form", true, false, "query", ctx.QueryParams(), &params.Query)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter query: %s", err))
	}

	// ------------- Optional query parameter "identifier" -------------

	err = runtime.BindQueryParameter("form", true, false, "identifier", ctx.QueryParams(), &params.Identifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter identifier: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetExpenses(ctx, params)
	return err
}

// DeleteExpensesId converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteExpensesId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteExpensesId(ctx, id)
	return err
}

// GetExpensesId converts echo context to params.
func (w *ServerInterfaceWrapper) GetExpensesId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetExpensesId(ctx, id)
	return err
}

// PostExpensesId converts echo context to params.
func (w *ServerInterfaceWrapper) PostExpensesId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostExpensesId(ctx, id)
	return err
}

// PutExpensesId converts echo context to params.
func (w *ServerInterfaceWrapper) PutExpensesId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutExpensesId(ctx, id)
	return err
}

// GetInvoices converts echo context to params.
func (w *ServerInterfaceWrapper) GetInvoices(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetInvoicesParams
	// ------------- Optional query parameter "query" -------------

	err = runtime.BindQueryParameter("form", true, false, "query", ctx.QueryParams(), &params.Query)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter query: %s", err))
	}

	// ------------- Optional query parameter "identifier" -------------

	err = runtime.BindQueryParameter("form", true, false, "identifier", ctx.QueryParams(), &params.Identifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter identifier: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetInvoices(ctx, params)
	return err
}

// DeleteInvoicesId converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteInvoicesId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteInvoicesId(ctx, id)
	return err
}

// GetInvoicesId converts echo context to params.
func (w *ServerInterfaceWrapper) GetInvoicesId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetInvoicesId(ctx, id)
	return err
}

// PostInvoicesId converts echo context to params.
func (w *ServerInterfaceWrapper) PostInvoicesId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostInvoicesId(ctx, id)
	return err
}

// PutInvoicesId converts echo context to params.
func (w *ServerInterfaceWrapper) PutInvoicesId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutInvoicesId(ctx, id)
	return err
}

// GetMiscRecords converts echo context to params.
func (w *ServerInterfaceWrapper) GetMiscRecords(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetMiscRecordsParams
	// ------------- Optional query parameter "query" -------------

	err = runtime.BindQueryParameter("form", true, false, "query", ctx.QueryParams(), &params.Query)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter query: %s", err))
	}

	// ------------- Optional query parameter "identifier" -------------

	err = runtime.BindQueryParameter("form", true, false, "identifier", ctx.QueryParams(), &params.Identifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter identifier: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetMiscRecords(ctx, params)
	return err
}

// DeleteMiscRecordsId converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteMiscRecordsId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteMiscRecordsId(ctx, id)
	return err
}

// GetMiscRecordsId converts echo context to params.
func (w *ServerInterfaceWrapper) GetMiscRecordsId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetMiscRecordsId(ctx, id)
	return err
}

// PostMiscRecordsId converts echo context to params.
func (w *ServerInterfaceWrapper) PostMiscRecordsId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostMiscRecordsId(ctx, id)
	return err
}

// PutMiscRecordsId converts echo context to params.
func (w *ServerInterfaceWrapper) PutMiscRecordsId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutMiscRecordsId(ctx, id)
	return err
}

// GetProjects converts echo context to params.
func (w *ServerInterfaceWrapper) GetProjects(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetProjectsParams
	// ------------- Optional query parameter "query" -------------

	err = runtime.BindQueryParameter("form", true, false, "query", ctx.QueryParams(), &params.Query)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter query: %s", err))
	}

	// ------------- Optional query parameter "identifier" -------------

	err = runtime.BindQueryParameter("form", true, false, "identifier", ctx.QueryParams(), &params.Identifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter identifier: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetProjects(ctx, params)
	return err
}

// DeleteProjectsId converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteProjectsId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteProjectsId(ctx, id)
	return err
}

// GetProjectsId converts echo context to params.
func (w *ServerInterfaceWrapper) GetProjectsId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetProjectsId(ctx, id)
	return err
}

// PostProjectsId converts echo context to params.
func (w *ServerInterfaceWrapper) PostProjectsId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostProjectsId(ctx, id)
	return err
}

// PutProjectsId converts echo context to params.
func (w *ServerInterfaceWrapper) PutProjectsId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutProjectsId(ctx, id)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/customers", wrapper.GetCustomers)
	router.DELETE(baseURL+"/customers/:id", wrapper.DeleteCustomersId)
	router.GET(baseURL+"/customers/:id", wrapper.GetCustomersId)
	router.POST(baseURL+"/customers/:id", wrapper.PostCustomersId)
	router.PUT(baseURL+"/customers/:id", wrapper.PutCustomersId)
	router.GET(baseURL+"/employees", wrapper.GetEmployees)
	router.DELETE(baseURL+"/employees/:id", wrapper.DeleteEmployeesId)
	router.GET(baseURL+"/employees/:id", wrapper.GetEmployeesId)
	router.POST(baseURL+"/employees/:id", wrapper.PostEmployeesId)
	router.PUT(baseURL+"/employees/:id", wrapper.PutEmployeesId)
	router.GET(baseURL+"/expenses", wrapper.GetExpenses)
	router.DELETE(baseURL+"/expenses/:id", wrapper.DeleteExpensesId)
	router.GET(baseURL+"/expenses/:id", wrapper.GetExpensesId)
	router.POST(baseURL+"/expenses/:id", wrapper.PostExpensesId)
	router.PUT(baseURL+"/expenses/:id", wrapper.PutExpensesId)
	router.GET(baseURL+"/invoices", wrapper.GetInvoices)
	router.DELETE(baseURL+"/invoices/:id", wrapper.DeleteInvoicesId)
	router.GET(baseURL+"/invoices/:id", wrapper.GetInvoicesId)
	router.POST(baseURL+"/invoices/:id", wrapper.PostInvoicesId)
	router.PUT(baseURL+"/invoices/:id", wrapper.PutInvoicesId)
	router.GET(baseURL+"/misc_records", wrapper.GetMiscRecords)
	router.DELETE(baseURL+"/misc_records/:id", wrapper.DeleteMiscRecordsId)
	router.GET(baseURL+"/misc_records/:id", wrapper.GetMiscRecordsId)
	router.POST(baseURL+"/misc_records/:id", wrapper.PostMiscRecordsId)
	router.PUT(baseURL+"/misc_records/:id", wrapper.PutMiscRecordsId)
	router.GET(baseURL+"/projects", wrapper.GetProjects)
	router.DELETE(baseURL+"/projects/:id", wrapper.DeleteProjectsId)
	router.GET(baseURL+"/projects/:id", wrapper.GetProjectsId)
	router.POST(baseURL+"/projects/:id", wrapper.PostProjectsId)
	router.PUT(baseURL+"/projects/:id", wrapper.PutProjectsId)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xde2/bttr/KoQ6YO0L33LrJcCAN02yLcBpF7QdDs6WnIEWH9lcJVIlqaRukW92/jtf",
	"7ICkKFE25UtiZ8lqYMBiSySf6+/5ieLjfo2GWMI5VuPoMOpf7USdKOZZzhkwJaPDr5GMx5Bh8yd8zoFJ",
	"0H8SkLGguaKcRYfRqb2ABOQCpB6JMMrxJAOmEOEM0HCC1BiQnhqzCeICYaTGVBCUY6EmSHGEpSwEmNs4",
	"G3HKRogn5uOwkJSBlFEnygXPQSgKRiBMrjCLgbyefNBzneupZqV7r7ACia7HoMYwvfBTyPKUTwA6CFTc",
	"e4bcnGZlp4MRhErkFE248PWJOpGa5BAdRkPOU8AsuulUwtWinZFZ4d5BAkJq/fV8vmTXYxqPg+JEnQg+",
	"4yxP9YqT7v7zen2pBGUjs3zGC6ZCC5Y+wvoLrRlG9l79d8YZTHro2PpQAMJ5DowAQVj7VF1zROiIKsSK",
	"bAgCScixwAqI9jBGhKse+jAGdIXTAtAYG82G3jTXVI1LVQUAisdY4FiBQHEhBLB4gmJOoNdQcXdv0Nvf",
	"Rcc//6gjACsFQmvy74sL8n8XF72LC/J19+biQv5+1P1y+XXv5ruQPYY0TfEwhYXxYf0qlay87Lx+TdNU",
	"K5NwcY2F1qZ0W1xIxTMQwTggWMEvyVEciwKns6ufYJsafJjSkfUJZCBGQJo2GOzsdwcH3d29GRt83b/p",
	"WhuU/wvqb8V4D0qlYIJoRhLtN32XSztZ3eu+cYZ46ueydjLjytgCfwSUFMLmWaznlQgnyliVSjP7s/Wq",
	"VWLSMVYw4iKQ/ccplpImk4YClGnAYdXnuByug5dKRFnCRWadQSUqpHX1CBjoYDdTpUBGIBAwJSjMxEoP",
	"veWKxnBosmF6GS8x4DOVSpuYMoTjuBn4P3JOQkrTAJD8+uvZifMTH/4JsbJyO8EKRq9ASJwiSoApmtC4",
	"RgCGoIwKf/m9PcD4+Qvo7u3uHnT3yQ50Xz3fTbp78X5CyMvh3vPBblg8uwCIgJiMfipAiya68ZhLYKi+",
	"3QiLnbk6SI55kRJtpnGRYYYEYGJy2JcSus9fBaVgOphCKTeT8B6yU+tKzJAbj/JC5FyCLlqMq14wyRnO",
	"AshyYj4NQaIMMKNslBQpyjBj0AiWhjo/H/0DvRoMBiGVDEYAOS7hZnE9ccBUFpMxvgJ9KceT1vXj7s5B",
	"aO0cU/JPqsYnMKRqKRCtYBNLRKiAWKUTpKepi0CGbdib8kP0zHcdj2IsSNhHuSE5IdRLijRF+rKzm2Mc",
	"SEDMBUGEx4UBwqfnJz/qQDh/+1MTyPp6eF/xfglIvZwkQTMKrnNzseuwlDymprSWY3qh+WqQ/iAwkxZ0",
	"58+OUc6lpMMU0BCzj0jVA8s4sZOShhdaKY+T5ab6xsKPh86v8ZY1Pm7W+KEiRU0qsOVpW5625WntPG1L",
	"hLZEaEuEtkSoNIacFecIxTxNIXbPYlmRKpqn1Xqav1AFmRn6nYAkOoye9Os9un65QefsHdXLYyHwxCLA",
	"FacxhBY/s5eQ5l/WJi5VerPEqYUc/FIoqTAjmnzZezawfxOvnuv6g9NP506pY286zV/csQ43FjV5aYjC",
	"IqvctaT+zXcBSs8tWfxod/dlSIpF9ciLkaZ7/sUL4a6Ey8B6QbQXRtEyde8LRQVc8Y8QnM1ccBaxm8OE",
	"Su0IokOHcZRypqmWZpespG62IoXLkARGTrCCdq4dSN5Gsq05oTZeQpw+UyWkqYbq7oSIR6iqlMERfrze",
	"YvujxvYteG7BcwuemwfPVSi589+ylNzx7gAlz6iM35mInl3/dTPkpdvUE2A2cJzgOvjdcwUaFgpJRdMU",
	"0SznQmGmLBTYIKJs1EOn1kyH6AjFAghVejpAieCZfc6XhcDM5nKzOpC5kfaGyhjSFDPghURWK4SFoFdA",
	"NrNJdld4DEkslwTLrLszWB4s3+Ks2qgLrdoM358Bp2pce8Lb27sPGA2jqA7Vrh3WhqS3SX6GuPkWp4HE",
	"16BFpSyAoCLnzKKwjiiczrUmqu1NJSqDeIKoRBmVKWBbsRmp9ojjMWYjIGZbDyWFKgQg/YREObs1stS5",
	"HWZm2/x+zPRnm9HfckavQheCVWZZ7uARhAB9yHGdu8sJU45ATx3/s/hSvseUz5aVy7xmbBNpEhaoen2b",
	"g5Cc1TL4IjwrA8W819H/SZ5p9jpBAlK4wh6DrXZemyi23RBbC6hZJ/VrK9eTvsGf0ZtCKhAZZiwMYEJN",
	"PphvF75Rt2+sqfQ2Juw7fhcSPTRAP6DT6l37DvoBHfuPL6zIosPfB52dS0/KQSUWZQpGIIxcKY4X6W1u",
	"8dX97b//ETQeB/XkUuH0mJPApL+dnffPzfWuvsHNjwkR9jxCtcLLwSAorVQCQM0X195TvuHXhhQgdczE",
	"gChrqPGexxTUBL23s4bQ3lx5K0JOM6uUxz15Ytf6Xoa02X81q0sITc0UbZtW94gWd0tHczhjyWSMuwfb",
	"XNzm4kPMRbufFcrEc3upDHeZQ6yrY8PpzYy65TZuKYIJvnqjLbCXe/ANvgUrnbBpnDmvtzXr2Y4+GqMw",
	"KABJ/oVizWmx+KiuqVAyHuNELUefSw+3Qf5jCbStJ50nV3nwOHdDln3AKBFp5hHjxmzaJtxEAGcKW9iC",
	"DNM0OowyOfr/RIxe7PZinkXOVNGLXUaiTlQIfc9YqVwe9vsjqsbFUN/YN9dvOjNP3FSio/MzBEy7xsRT",
	"IcHVJsq6Cj4rdPruHCnOU3QUx+iKYo0e707ff0iK1B6bSrDdbklp7FqnSrnenH2YEYvnwCQvRAw9Lkb9",
	"cpDs63u1Oaiy3jw+NqsYAU/Kx34DYFEnKh91o8No0Dvo7ZrTUjkwnFONYr1Bb2D3ZMbGEf3qaVB/GkGw",
	"YUgVgkmt2pF2hAHJNEX1c2R1Csk+/mtbfSpAmM2jTGuvcxe7DYToJ1DH1aqGpeAMlBHh9+C5U9MZpNxD",
	"vF5fm5twkOx7hWSR51woJAGLeEzZyLBBByL17IiaKiDNrsCXL5NyAOJXmgClKcLkyr6SQQmFlEizqyAq",
	"7Scow8ouUImvlaNaTqNvHXTuo41pbdOZ3Jop7lYajRXHTcvieuEaVMoTkE48ztIJgs84VvXNZRmT6Cnj",
	"TZWvx1hJDlcgnrVp4KHdPDUuO5EAmXN3tml3MHDpWb5XxXmeluW1/6fUqn715lu006AB3yT+FNikaa1n",
	"HcI3nejACtC8/cydYHwPQnv7VAhu+ZAssgyLiY3KZlhrQMQjHZRVvYku9Zg6Z/pfKbmxy6Vgd1CboX5i",
	"vq/8eaaRyNnLM9fUSVhXs+ysBMkijkHKpEjTSU8ruT/YDxQBXgWOjZsyB4CgsxOU8IKR3i0s5LmXFWnq",
	"m+wdZPwKvCeGsMk6DlfaYaBhmI0E0iQYRrXk92zVqbirecpwgs5O2uw4FypLDlIzXwGfCpA6gDz/1Jzg",
	"5XB3cDDcS7p7e/Ggu//i4GUXv3g56L5KduOXOzuvYpw8d+BgtqU9bDDe+lRQASQ6VKKABRihn9BmI0A/",
	"l02HgBH5NSeT9XrfUM+bm6mAbknAI0KWzrojQvyKgBJMU7hjSBwRskRS5UXIpMWDtOivOcF/OZLVBrbi",
	"LLSxxvpqg3xlflSNvAU/Oq1WfZT8qBJ/M/zotGnZLT+az4/qEF4HPwIvNF3OuO+mc2ZJflT5czl+5G5f",
	"nR9VI++ZH1X2CZqsnR+FDXOf/KgS856tOs2PnBwz/Khhx78hP5oOgUfKj6oYWR8/WpRUbfzoIVp0ZX60",
	"2Zyr+NF8Gxus9xqbFtEj7NMj195UvsdzJ0fSkkbYLTfzUs9U3jBNqlukHiNLKqXfEEmq7Pstc6QqPBeR",
	"pCqU1sGRvLis0qbszmtmzbIEqbx9SX5UNiquTo+q/vl7ZUd18+2sseZwo5BNNhU/LeSo7ri8R5NOUyO3",
	"xAwz8ox4W2IU6ot+ILyo6f71F3H/p0s2SYxcV/HaeNH8dGplRQ/RnqvTok2mW8WK5llYo7vfWbISJ6pO",
	"ft+BE3k9Ko+QEznpN8OJqv6rb5oTVeG5iBNVobQOTkTruHRZ49qjmlmzJCdywi3HiVzz2MqcqOqiu19O",
	"5PVOzhirnRMFbbKp+AlzorO65e0eTTrNidwS05zIN+JtOVHtmofGiabcv/4a7vebb5ATVZ2ea+NE89Op",
	"jRM9SHuuzIk2mm4VJ5pnYY3uGZXxH6JuoVmJFwUbae5Ckt54/TyPkifFmz2B1GLwb5k1+S1gi4hTuPFr",
	"HSyqraXMJZ2XZoHEW5JaedmxHLsKNoiuTLWCs9wz7wrJ0GrediLWZsENRmWYjunrf6XNp4lZcL1pljZt",
	"5dsytRZnPjTaNhss62caUy3pGyRvQQ+vj8mtmKBt1O4B23xlgnd/OVyxvZW8oKuQ3zewEvVz3QN3YXte",
	"B8IjpHpO+s0wvdq+3/RRKhchi5hdFUrrIHNeXLrMcc0vzaxZkre5+ZYjba7ramWe5gbeMzUrlw0aq52J",
	"BW2yqfgJczCvoekeTTrNvNwS02TLN+JtiVbtmofGrabcv4GzPl5r4wZZVdUiuTYiNT+d2njTg7Tnyoxp",
	"o+lWkaR5FjZDtMpgLpgGwOiyurPqEvROJk6VcJ4BZ4CuxxwNi4lEUhVJYn/racILUf88ni7/5Wzeca72",
	"2a65+Gh/+33Ci+bw6r1nyz8ptpl/wKMhA632GQOewc6nxgK0epfojfepaefB/S6XJ2heRU9LPSnbiuuf",
	"c/QGS4WV62GfHm5+arG6AZlOWsq03b0fbdI0D2F7b/U7lLOh8EfGCaQzizx58qQ6A3XBLorBYC9+bxL8",
	"BBLKqOmCsBn/DpIfLuaf3bqIUN/MARfsgnlz33lqf+ZAkM3Rzr0auL0ILppmtSvnvvPUbdp5KTBHw+BO",
	"4+1l8rZPZzUOrbWOpdosYMBnju7ntrPi9iKUrRmzmpofjbnbvJNWrSwuzNOrrN53EMDNMKuZvXLnqdu0",
	"qxCr1M+75OGWu3jZiT53FR79JHiRNyrq0flZqNur4xfHutDV5aZZOGp0rqH20hPpjRYjcP6zcs40xISS",
	"shmm0+6dNkgnYIfLm8ub/wUAAP//GqRrNuJ1AAA=",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}

