// Package api provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// Expense defines model for expense.
type Expense struct {

	// States whether a third party (employee, etc.) advanced the payment of this Expense for the company
	AdvancedByThirdParty *bool `json:"advancedByThirdParty,omitempty"`

	// Refers to the third party which advanced the payment
	AdvancedThirdPartyId *string `json:"advancedThirdPartyId,omitempty"`

	// Representation of a amount of money. Cents are appended as a two digit number separated by a dot. The value has to be appended with the three character currency code.
	Amount *string `json:"amount,omitempty"`

	// States whether the costs for the Expense will be forwarded to the customer
	Billable *bool `json:"billable,omitempty"`

	// Day the obligation emerged
	DateOfAccrual *string `json:"dateOfAccrual,omitempty"`

	// The date of the settlement of the Expense (the company has not to take further actions after this date)
	DateOfSettlement *string `json:"dateOfSettlement,omitempty"`

	// Classify the Expense into an Expense category. This information is used to generate the ledger entries for the Expense. Notice: The Expense category has to be existent in acc.
	ExpenseCategory *string `json:"expenseCategory,omitempty"`

	// UUID of the object used for the universal identification of an element
	Id *string `json:"id,omitempty"`

	// Unique user-chosen identifier for a Expense, should be human readable
	Identifier *string `json:"identifier,omitempty"`

	// States whether this Expense is for an internal purpose or not.
	Internal *bool `json:"internal,omitempty"`

	// Describes meaningful manner the Expense
	Name *string `json:"name,omitempty"`

	// Refers to the customer which have to pay the Expense
	ObligedCustomerId *string `json:"obligedCustomerId,omitempty"`

	// States whether the Expense was directly paid with the main account debithether the Expense was directly paid with the main account debit card.
	PaidWithDebit *bool `json:"paidWithDebit,omitempty"`

	// The full path to the business record document (PDF or PNG)
	Path *string `json:"path,omitempty"`

	// Refers to the associated project.
	ProjectId *string `json:"projectId,omitempty"`

	// Refers to a possible bank transaction which settled the Expense for the company
	SettlementTransactionId *string `json:"settlementTransactionId,omitempty"`
}

// ExpenseBase defines model for expenseBase.
type ExpenseBase struct {

	// States whether a third party (employee, etc.) advanced the payment of this Expense for the company
	AdvancedByThirdParty *bool `json:"advancedByThirdParty,omitempty"`

	// Refers to the third party which advanced the payment
	AdvancedThirdPartyId *string `json:"advancedThirdPartyId,omitempty"`

	// The costs of the Expense
	Amount *string `json:"amount,omitempty"`

	// States whether the costs for the Expense will be forwarded to the customer
	Billable *bool `json:"billable,omitempty"`

	// Day the obligation emerged
	DateOfAccrual *string `json:"dateOfAccrual,omitempty"`

	// The date of the settlement of the Expense (the company has not to take further actions after this date)
	DateOfSettlement *string `json:"dateOfSettlement,omitempty"`

	// Classify the Expense into an Expense category. This information is used to generate the ledger entries for the Expense. Notice: The Expense category has to be existent in acc.
	ExpenseCategory *string `json:"expenseCategory,omitempty"`

	// Unique user-chosen identifier for a Expense, should be human readable
	Identifier *string `json:"identifier,omitempty"`

	// States whether this Expense is for an internal purpose or not.
	Internal *bool `json:"internal,omitempty"`

	// Describes meaningful manner the Expense
	Name *string `json:"name,omitempty"`

	// Refers to the customer which have to pay the Expense
	ObligedCustomerId *string `json:"obligedCustomerId,omitempty"`

	// States whether the Expense was directly paid with the main account debithether the Expense was directly paid with the main account debit card.
	PaidWithDebit *bool `json:"paidWithDebit,omitempty"`

	// The full path to the business record document (PDF or PNG)
	Path *string `json:"path,omitempty"`

	// Refers to the associated project.
	ProjectId *string `json:"projectId,omitempty"`

	// Refers to a possible bank transaction which settled the Expense for the company
	SettlementTransactionId *string `json:"settlementTransactionId,omitempty"`
}

// Expenses defines model for expenses.
type Expenses []Expense

// Invoice defines model for invoice.
type Invoice struct {

	// Outstanding amount.
	Amount *string `json:"amount,omitempty"`

	// Refers to the customer the Invoice was sent to.
	CustomerId *string `json:"customerId,omitempty"`

	// The date the customer paid the outstanding amount.
	DateOfSettlement *string `json:"dateOfSettlement,omitempty"`

	// UUID of the object used for the universal identification of an element
	Id *string `json:"id,omitempty"`

	// Unique user-chosen identifier for a Invoice, should be human readable
	Identifier *string `json:"identifier,omitempty"`

	// Describes the Invoice.
	Name *string `json:"name,omitempty"`

	// The full path to the business record document (PDF or PNG).
	Path *string `json:"path,omitempty"`

	// Refers to the associated project.
	ProjectId *string `json:"projectId,omitempty"`

	// Revoked Invoices are disabled an no longer taken into account.
	Revoked *bool `json:"revoked,omitempty"`

	// Day the Invoice was sent to the customer.
	SendDate *string `json:"sendDate,omitempty"`

	// Refers to a possible bank transaction which settled the Invoice for the company.
	SettlementTransactionId *string `json:"settlementTransactionId,omitempty"`
}

// InvoiceBase defines model for invoiceBase.
type InvoiceBase struct {

	// Outstanding amount.
	Amount *string `json:"amount,omitempty"`

	// Refers to the customer the Invoice was sent to.
	CustomerId *string `json:"customerId,omitempty"`

	// The date the customer paid the outstanding amount.
	DateOfSettlement *string `json:"dateOfSettlement,omitempty"`

	// Unique user-chosen identifier for a Invoice, should be human readable
	Identifier *string `json:"identifier,omitempty"`

	// Describes the Invoice.
	Name *string `json:"name,omitempty"`

	// The full path to the business record document (PDF or PNG).
	Path *string `json:"path,omitempty"`

	// Refers to the associated project.
	ProjectId *string `json:"projectId,omitempty"`

	// Revoked Invoices are disabled an no longer taken into account.
	Revoked *bool `json:"revoked,omitempty"`

	// Day the Invoice was sent to the customer.
	SendDate *string `json:"sendDate,omitempty"`

	// Refers to a possible bank transaction which settled the Invoice for the company.
	SettlementTransactionId *string `json:"settlementTransactionId,omitempty"`
}

// Invoices defines model for invoices.
type Invoices []Invoice

// MiscRecord defines model for miscRecord.
type MiscRecord struct {

	// Day the Miscellaneous Record arrived emerged
	Date *string `json:"date,omitempty"`

	// Unique user-chosen identifier for a Miscellaneous Records, should be human readable
	Identifier *string `json:"identifier,omitempty"`

	// Name of the Miscellaneous Record.
	Name *string `json:"name,omitempty"`

	// The full path to the business record document (PDF or PNG)
	Path *string `json:"path,omitempty"`

	// Refers to an optional transaction which was issued upon the arrival of the Miscellaneous Record. Name of this property is misleading and will be changed in a future version.
	SettlementTransactionId *string `json:"settlementTransactionId,omitempty"`
}

// MiscRecordBase defines model for miscRecordBase.
type MiscRecordBase struct {

	// Day the Miscellaneous Record arrived emerged
	Date *string `json:"date,omitempty"`

	// Unique user-chosen identifier for a Invoice, should be human readable
	Identifier *string `json:"identifier,omitempty"`

	// Name of the Miscellaneous Record.
	Name *string `json:"name,omitempty"`

	// The full path to the business record document (PDF or PNG)
	Path *string `json:"path,omitempty"`

	// Refers to an optional transaction which was issued upon the arrival of the Miscellaneous Record. Name of this property is misleading and will be changed in a future version.
	SettlementTransactionId *string `json:"settlementTransactionId,omitempty"`
}

// MiscRecords defines model for miscRecords.
type MiscRecords []MiscRecord

// Parties defines model for parties.
type Parties []Party

// Party defines model for party.
type Party struct {

	// UUID of the object used for the universal identification of an element
	Id *string `json:"id,omitempty"`

	// Unique user-chosen identifier for a Invoice, should be human readable
	Identifier *string `json:"identifier,omitempty"`

	// Name of the person/company
	Name *string `json:"name,omitempty"`

	// States whether a party is a customer or a employee. 0 = Employee, 1 = Customer.
	PartyType *int `json:"partyType,omitempty"`

	// Name of the place
	Place *string `json:"place,omitempty"`

	// ZIP/Postal-Code of the address
	PostalCode *int `json:"postalCode,omitempty"`

	// Name of the street the party residence in
	Street *string `json:"street,omitempty"`

	// Street number of party's address
	StreetNr *int `json:"streetNr,omitempty"`
}

// PartyBase defines model for partyBase.
type PartyBase struct {

	// Unique user-chosen identifier for a Party, should be human readable
	Identifier *string `json:"identifier,omitempty"`

	// Name of the person/company
	Name *string `json:"name,omitempty"`

	// States whether a party is a customer or a employee. 0 = Employee, 1 = Customer.
	PartyType *int `json:"partyType,omitempty"`

	// Name of the place
	Place *string `json:"place,omitempty"`

	// ZIP/Postal-Code of the address
	PostalCode *int `json:"postalCode,omitempty"`

	// Name of the street the party residence in
	Street *string `json:"street,omitempty"`

	// Street number of party's address
	StreetNr *int `json:"streetNr,omitempty"`
}

// Project defines model for project.
type Project struct {

	// Refers to the customer the project is associated to.
	CustomerId *string `json:"customerId,omitempty"`

	// UUID of the object used for the universal identification of an element
	Id *string `json:"id,omitempty"`

	// Unique user-chosen identifier for a Project, should be human readable
	Identifier *string `json:"identifier,omitempty"`

	// Name of the Project.
	Name *string `json:"name,omitempty"`
}

// ProjectBase defines model for projectBase.
type ProjectBase struct {

	// Refers to the customer the project is associated to.
	CustomerId *string `json:"customerId,omitempty"`

	// Unique user-chosen identifier for a Project, should be human readable
	Identifier *string `json:"identifier,omitempty"`

	// Name of the Project.
	Name *string `json:"name,omitempty"`
}

// Projects defines model for projects.
type Projects []Project

// GetCustomersParams defines parameters for GetCustomers.
type GetCustomersParams struct {

	// The current version of Acc doesn't support searching in specific parameters it uses a fuzzy search over all advisable fields and returns any matching Customers. The use of both parameters is currently not supported as this makes no sense (every identifier can only exist once).
	Query *string `json:"query,omitempty"`

	// Search for Customers with a matching identifier. This returns only exact matching elements (no fuzzy search whatsoever). The use of both parameters is currently not supported as this makes no sense (every identifier can only exist once).
	Identifier *string `json:"identifier,omitempty"`
}

// PostCustomersJSONBody defines parameters for PostCustomers.
type PostCustomersJSONBody PartyBase

// PutCustomersIdJSONBody defines parameters for PutCustomersId.
type PutCustomersIdJSONBody PartyBase

// GetEmployeesParams defines parameters for GetEmployees.
type GetEmployeesParams struct {

	// The current version of Acc doesn't support searching in specific parameters it uses a fuzzy search over all advisable fields and returns any matching Employees.
	Query *string `json:"query,omitempty"`

	// Search for Employees with a matching identifier. This returns only exact matching elements (no fuzzy search whatsoever).
	Identifier *string `json:"identifier,omitempty"`
}

// PostEmployeesJSONBody defines parameters for PostEmployees.
type PostEmployeesJSONBody PartyBase

// PutEmployeesIdJSONBody defines parameters for PutEmployeesId.
type PutEmployeesIdJSONBody PartyBase

// GetExpensesParams defines parameters for GetExpenses.
type GetExpensesParams struct {

	// The current version of Acc doesn't support searching in specific parameters it uses a fuzzy search over all advisable fields and returns any matching Expenses.
	Query *string `json:"query,omitempty"`

	// Search for Expenses with a matching identifier. This returns only exact matching elements (no fuzzy search whatsoever).
	Identifier *string `json:"identifier,omitempty"`
}

// PostExpensesJSONBody defines parameters for PostExpenses.
type PostExpensesJSONBody ExpenseBase

// PutExpensesIdJSONBody defines parameters for PutExpensesId.
type PutExpensesIdJSONBody ExpenseBase

// GetInvoicesParams defines parameters for GetInvoices.
type GetInvoicesParams struct {

	// The current version of Acc doesn't support searching in specific parameters it uses a fuzzy search over all advisable fields and returns any matching Invoices.
	Query *string `json:"query,omitempty"`

	// Search for Invoices with a matching identifier. This returns only exact matching elements (no fuzzy search whatsoever).
	Identifier *string `json:"identifier,omitempty"`
}

// PostInvoicesJSONBody defines parameters for PostInvoices.
type PostInvoicesJSONBody InvoiceBase

// PutInvoicesIdJSONBody defines parameters for PutInvoicesId.
type PutInvoicesIdJSONBody InvoiceBase

// GetMiscRecordsParams defines parameters for GetMiscRecords.
type GetMiscRecordsParams struct {

	// The current version of Acc doesn't support searching in specific parameters it uses a fuzzy search over all advisable fields and returns any matching customers.
	Query *string `json:"query,omitempty"`

	// Search for Miscellaneous Records with a matching identifier. This returns only exact matching elements (no fuzzy search whatsoever).
	Identifier *string `json:"identifier,omitempty"`
}

// PostMiscRecordsJSONBody defines parameters for PostMiscRecords.
type PostMiscRecordsJSONBody MiscRecordBase

// PutMiscRecordsIdJSONBody defines parameters for PutMiscRecordsId.
type PutMiscRecordsIdJSONBody MiscRecordBase

// GetProjectsParams defines parameters for GetProjects.
type GetProjectsParams struct {

	// The current version of Acc doesn't support searching in specific parameters it uses a fuzzy search over all advisable fields and returns any matching Projects.
	Query *string `json:"query,omitempty"`

	// Search for Projects with a matching identifier. This returns only exact matching elements (no fuzzy search whatsoever).
	Identifier *string `json:"identifier,omitempty"`
}

// PostProjectsJSONBody defines parameters for PostProjects.
type PostProjectsJSONBody ProjectBase

// PutProjectsIdJSONBody defines parameters for PutProjectsId.
type PutProjectsIdJSONBody ProjectBase

// PostCustomersRequestBody defines body for PostCustomers for application/json ContentType.
type PostCustomersJSONRequestBody PostCustomersJSONBody

// PutCustomersIdRequestBody defines body for PutCustomersId for application/json ContentType.
type PutCustomersIdJSONRequestBody PutCustomersIdJSONBody

// PostEmployeesRequestBody defines body for PostEmployees for application/json ContentType.
type PostEmployeesJSONRequestBody PostEmployeesJSONBody

// PutEmployeesIdRequestBody defines body for PutEmployeesId for application/json ContentType.
type PutEmployeesIdJSONRequestBody PutEmployeesIdJSONBody

// PostExpensesRequestBody defines body for PostExpenses for application/json ContentType.
type PostExpensesJSONRequestBody PostExpensesJSONBody

// PutExpensesIdRequestBody defines body for PutExpensesId for application/json ContentType.
type PutExpensesIdJSONRequestBody PutExpensesIdJSONBody

// PostInvoicesRequestBody defines body for PostInvoices for application/json ContentType.
type PostInvoicesJSONRequestBody PostInvoicesJSONBody

// PutInvoicesIdRequestBody defines body for PutInvoicesId for application/json ContentType.
type PutInvoicesIdJSONRequestBody PutInvoicesIdJSONBody

// PostMiscRecordsRequestBody defines body for PostMiscRecords for application/json ContentType.
type PostMiscRecordsJSONRequestBody PostMiscRecordsJSONBody

// PutMiscRecordsIdRequestBody defines body for PutMiscRecordsId for application/json ContentType.
type PutMiscRecordsIdJSONRequestBody PutMiscRecordsIdJSONBody

// PostProjectsRequestBody defines body for PostProjects for application/json ContentType.
type PostProjectsJSONRequestBody PostProjectsJSONBody

// PutProjectsIdRequestBody defines body for PutProjectsId for application/json ContentType.
type PutProjectsIdJSONRequestBody PutProjectsIdJSONBody

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A callback for modifying requests which are generated before sending over
	// the network.
	RequestEditor RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = http.DefaultClient
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditor = fn
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetCustomers request
	GetCustomers(ctx context.Context, params *GetCustomersParams) (*http.Response, error)

	// PostCustomers request  with any body
	PostCustomersWithBody(ctx context.Context, contentType string, body io.Reader) (*http.Response, error)

	PostCustomers(ctx context.Context, body PostCustomersJSONRequestBody) (*http.Response, error)

	// DeleteCustomersId request
	DeleteCustomersId(ctx context.Context, id string) (*http.Response, error)

	// GetCustomersId request
	GetCustomersId(ctx context.Context, id string) (*http.Response, error)

	// PutCustomersId request  with any body
	PutCustomersIdWithBody(ctx context.Context, id string, contentType string, body io.Reader) (*http.Response, error)

	PutCustomersId(ctx context.Context, id string, body PutCustomersIdJSONRequestBody) (*http.Response, error)

	// GetEmployees request
	GetEmployees(ctx context.Context, params *GetEmployeesParams) (*http.Response, error)

	// PostEmployees request  with any body
	PostEmployeesWithBody(ctx context.Context, contentType string, body io.Reader) (*http.Response, error)

	PostEmployees(ctx context.Context, body PostEmployeesJSONRequestBody) (*http.Response, error)

	// DeleteEmployeesId request
	DeleteEmployeesId(ctx context.Context, id string) (*http.Response, error)

	// GetEmployeesId request
	GetEmployeesId(ctx context.Context, id string) (*http.Response, error)

	// PutEmployeesId request  with any body
	PutEmployeesIdWithBody(ctx context.Context, id string, contentType string, body io.Reader) (*http.Response, error)

	PutEmployeesId(ctx context.Context, id string, body PutEmployeesIdJSONRequestBody) (*http.Response, error)

	// GetExpenses request
	GetExpenses(ctx context.Context, params *GetExpensesParams) (*http.Response, error)

	// PostExpenses request  with any body
	PostExpensesWithBody(ctx context.Context, contentType string, body io.Reader) (*http.Response, error)

	PostExpenses(ctx context.Context, body PostExpensesJSONRequestBody) (*http.Response, error)

	// DeleteExpensesId request
	DeleteExpensesId(ctx context.Context, id string) (*http.Response, error)

	// GetExpensesId request
	GetExpensesId(ctx context.Context, id string) (*http.Response, error)

	// PutExpensesId request  with any body
	PutExpensesIdWithBody(ctx context.Context, id string, contentType string, body io.Reader) (*http.Response, error)

	PutExpensesId(ctx context.Context, id string, body PutExpensesIdJSONRequestBody) (*http.Response, error)

	// GetInvoices request
	GetInvoices(ctx context.Context, params *GetInvoicesParams) (*http.Response, error)

	// PostInvoices request  with any body
	PostInvoicesWithBody(ctx context.Context, contentType string, body io.Reader) (*http.Response, error)

	PostInvoices(ctx context.Context, body PostInvoicesJSONRequestBody) (*http.Response, error)

	// DeleteInvoicesId request
	DeleteInvoicesId(ctx context.Context, id string) (*http.Response, error)

	// GetInvoicesId request
	GetInvoicesId(ctx context.Context, id string) (*http.Response, error)

	// PutInvoicesId request  with any body
	PutInvoicesIdWithBody(ctx context.Context, id string, contentType string, body io.Reader) (*http.Response, error)

	PutInvoicesId(ctx context.Context, id string, body PutInvoicesIdJSONRequestBody) (*http.Response, error)

	// GetMiscRecords request
	GetMiscRecords(ctx context.Context, params *GetMiscRecordsParams) (*http.Response, error)

	// PostMiscRecords request  with any body
	PostMiscRecordsWithBody(ctx context.Context, contentType string, body io.Reader) (*http.Response, error)

	PostMiscRecords(ctx context.Context, body PostMiscRecordsJSONRequestBody) (*http.Response, error)

	// DeleteMiscRecordsId request
	DeleteMiscRecordsId(ctx context.Context, id string) (*http.Response, error)

	// GetMiscRecordsId request
	GetMiscRecordsId(ctx context.Context, id string) (*http.Response, error)

	// PutMiscRecordsId request  with any body
	PutMiscRecordsIdWithBody(ctx context.Context, id string, contentType string, body io.Reader) (*http.Response, error)

	PutMiscRecordsId(ctx context.Context, id string, body PutMiscRecordsIdJSONRequestBody) (*http.Response, error)

	// GetProjects request
	GetProjects(ctx context.Context, params *GetProjectsParams) (*http.Response, error)

	// PostProjects request  with any body
	PostProjectsWithBody(ctx context.Context, contentType string, body io.Reader) (*http.Response, error)

	PostProjects(ctx context.Context, body PostProjectsJSONRequestBody) (*http.Response, error)

	// DeleteProjectsId request
	DeleteProjectsId(ctx context.Context, id string) (*http.Response, error)

	// GetProjectsId request
	GetProjectsId(ctx context.Context, id string) (*http.Response, error)

	// PutProjectsId request  with any body
	PutProjectsIdWithBody(ctx context.Context, id string, contentType string, body io.Reader) (*http.Response, error)

	PutProjectsId(ctx context.Context, id string, body PutProjectsIdJSONRequestBody) (*http.Response, error)
}

func (c *Client) GetCustomers(ctx context.Context, params *GetCustomersParams) (*http.Response, error) {
	req, err := NewGetCustomersRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) PostCustomersWithBody(ctx context.Context, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewPostCustomersRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) PostCustomers(ctx context.Context, body PostCustomersJSONRequestBody) (*http.Response, error) {
	req, err := NewPostCustomersRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteCustomersId(ctx context.Context, id string) (*http.Response, error) {
	req, err := NewDeleteCustomersIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetCustomersId(ctx context.Context, id string) (*http.Response, error) {
	req, err := NewGetCustomersIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) PutCustomersIdWithBody(ctx context.Context, id string, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewPutCustomersIdRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) PutCustomersId(ctx context.Context, id string, body PutCustomersIdJSONRequestBody) (*http.Response, error) {
	req, err := NewPutCustomersIdRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetEmployees(ctx context.Context, params *GetEmployeesParams) (*http.Response, error) {
	req, err := NewGetEmployeesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) PostEmployeesWithBody(ctx context.Context, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewPostEmployeesRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) PostEmployees(ctx context.Context, body PostEmployeesJSONRequestBody) (*http.Response, error) {
	req, err := NewPostEmployeesRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteEmployeesId(ctx context.Context, id string) (*http.Response, error) {
	req, err := NewDeleteEmployeesIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetEmployeesId(ctx context.Context, id string) (*http.Response, error) {
	req, err := NewGetEmployeesIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) PutEmployeesIdWithBody(ctx context.Context, id string, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewPutEmployeesIdRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) PutEmployeesId(ctx context.Context, id string, body PutEmployeesIdJSONRequestBody) (*http.Response, error) {
	req, err := NewPutEmployeesIdRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetExpenses(ctx context.Context, params *GetExpensesParams) (*http.Response, error) {
	req, err := NewGetExpensesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) PostExpensesWithBody(ctx context.Context, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewPostExpensesRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) PostExpenses(ctx context.Context, body PostExpensesJSONRequestBody) (*http.Response, error) {
	req, err := NewPostExpensesRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteExpensesId(ctx context.Context, id string) (*http.Response, error) {
	req, err := NewDeleteExpensesIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetExpensesId(ctx context.Context, id string) (*http.Response, error) {
	req, err := NewGetExpensesIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) PutExpensesIdWithBody(ctx context.Context, id string, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewPutExpensesIdRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) PutExpensesId(ctx context.Context, id string, body PutExpensesIdJSONRequestBody) (*http.Response, error) {
	req, err := NewPutExpensesIdRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetInvoices(ctx context.Context, params *GetInvoicesParams) (*http.Response, error) {
	req, err := NewGetInvoicesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) PostInvoicesWithBody(ctx context.Context, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewPostInvoicesRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) PostInvoices(ctx context.Context, body PostInvoicesJSONRequestBody) (*http.Response, error) {
	req, err := NewPostInvoicesRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteInvoicesId(ctx context.Context, id string) (*http.Response, error) {
	req, err := NewDeleteInvoicesIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetInvoicesId(ctx context.Context, id string) (*http.Response, error) {
	req, err := NewGetInvoicesIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) PutInvoicesIdWithBody(ctx context.Context, id string, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewPutInvoicesIdRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) PutInvoicesId(ctx context.Context, id string, body PutInvoicesIdJSONRequestBody) (*http.Response, error) {
	req, err := NewPutInvoicesIdRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetMiscRecords(ctx context.Context, params *GetMiscRecordsParams) (*http.Response, error) {
	req, err := NewGetMiscRecordsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) PostMiscRecordsWithBody(ctx context.Context, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewPostMiscRecordsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) PostMiscRecords(ctx context.Context, body PostMiscRecordsJSONRequestBody) (*http.Response, error) {
	req, err := NewPostMiscRecordsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteMiscRecordsId(ctx context.Context, id string) (*http.Response, error) {
	req, err := NewDeleteMiscRecordsIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetMiscRecordsId(ctx context.Context, id string) (*http.Response, error) {
	req, err := NewGetMiscRecordsIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) PutMiscRecordsIdWithBody(ctx context.Context, id string, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewPutMiscRecordsIdRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) PutMiscRecordsId(ctx context.Context, id string, body PutMiscRecordsIdJSONRequestBody) (*http.Response, error) {
	req, err := NewPutMiscRecordsIdRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetProjects(ctx context.Context, params *GetProjectsParams) (*http.Response, error) {
	req, err := NewGetProjectsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) PostProjectsWithBody(ctx context.Context, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewPostProjectsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) PostProjects(ctx context.Context, body PostProjectsJSONRequestBody) (*http.Response, error) {
	req, err := NewPostProjectsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteProjectsId(ctx context.Context, id string) (*http.Response, error) {
	req, err := NewDeleteProjectsIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetProjectsId(ctx context.Context, id string) (*http.Response, error) {
	req, err := NewGetProjectsIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) PutProjectsIdWithBody(ctx context.Context, id string, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewPutProjectsIdRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) PutProjectsId(ctx context.Context, id string, body PutProjectsIdJSONRequestBody) (*http.Response, error) {
	req, err := NewPutProjectsIdRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

// NewGetCustomersRequest generates requests for GetCustomers
func NewGetCustomersRequest(server string, params *GetCustomersParams) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/customers")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.Query != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "query", *params.Query); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Identifier != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "identifier", *params.Identifier); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostCustomersRequest calls the generic PostCustomers builder with application/json body
func NewPostCustomersRequest(server string, body PostCustomersJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostCustomersRequestWithBody(server, "application/json", bodyReader)
}

// NewPostCustomersRequestWithBody generates requests for PostCustomers with any type of body
func NewPostCustomersRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/customers")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewDeleteCustomersIdRequest generates requests for DeleteCustomersId
func NewDeleteCustomersIdRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/customers/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetCustomersIdRequest generates requests for GetCustomersId
func NewGetCustomersIdRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/customers/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutCustomersIdRequest calls the generic PutCustomersId builder with application/json body
func NewPutCustomersIdRequest(server string, id string, body PutCustomersIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutCustomersIdRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPutCustomersIdRequestWithBody generates requests for PutCustomersId with any type of body
func NewPutCustomersIdRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/customers/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewGetEmployeesRequest generates requests for GetEmployees
func NewGetEmployeesRequest(server string, params *GetEmployeesParams) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/employees")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.Query != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "query", *params.Query); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Identifier != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "identifier", *params.Identifier); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostEmployeesRequest calls the generic PostEmployees builder with application/json body
func NewPostEmployeesRequest(server string, body PostEmployeesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostEmployeesRequestWithBody(server, "application/json", bodyReader)
}

// NewPostEmployeesRequestWithBody generates requests for PostEmployees with any type of body
func NewPostEmployeesRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/employees")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewDeleteEmployeesIdRequest generates requests for DeleteEmployeesId
func NewDeleteEmployeesIdRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/employees/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetEmployeesIdRequest generates requests for GetEmployeesId
func NewGetEmployeesIdRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/employees/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutEmployeesIdRequest calls the generic PutEmployeesId builder with application/json body
func NewPutEmployeesIdRequest(server string, id string, body PutEmployeesIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutEmployeesIdRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPutEmployeesIdRequestWithBody generates requests for PutEmployeesId with any type of body
func NewPutEmployeesIdRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/employees/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewGetExpensesRequest generates requests for GetExpenses
func NewGetExpensesRequest(server string, params *GetExpensesParams) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/expenses")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.Query != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "query", *params.Query); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Identifier != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "identifier", *params.Identifier); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostExpensesRequest calls the generic PostExpenses builder with application/json body
func NewPostExpensesRequest(server string, body PostExpensesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostExpensesRequestWithBody(server, "application/json", bodyReader)
}

// NewPostExpensesRequestWithBody generates requests for PostExpenses with any type of body
func NewPostExpensesRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/expenses")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewDeleteExpensesIdRequest generates requests for DeleteExpensesId
func NewDeleteExpensesIdRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/expenses/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetExpensesIdRequest generates requests for GetExpensesId
func NewGetExpensesIdRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/expenses/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutExpensesIdRequest calls the generic PutExpensesId builder with application/json body
func NewPutExpensesIdRequest(server string, id string, body PutExpensesIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutExpensesIdRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPutExpensesIdRequestWithBody generates requests for PutExpensesId with any type of body
func NewPutExpensesIdRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/expenses/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewGetInvoicesRequest generates requests for GetInvoices
func NewGetInvoicesRequest(server string, params *GetInvoicesParams) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/invoices")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.Query != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "query", *params.Query); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Identifier != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "identifier", *params.Identifier); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostInvoicesRequest calls the generic PostInvoices builder with application/json body
func NewPostInvoicesRequest(server string, body PostInvoicesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostInvoicesRequestWithBody(server, "application/json", bodyReader)
}

// NewPostInvoicesRequestWithBody generates requests for PostInvoices with any type of body
func NewPostInvoicesRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/invoices")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewDeleteInvoicesIdRequest generates requests for DeleteInvoicesId
func NewDeleteInvoicesIdRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/invoices/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetInvoicesIdRequest generates requests for GetInvoicesId
func NewGetInvoicesIdRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/invoices/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutInvoicesIdRequest calls the generic PutInvoicesId builder with application/json body
func NewPutInvoicesIdRequest(server string, id string, body PutInvoicesIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutInvoicesIdRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPutInvoicesIdRequestWithBody generates requests for PutInvoicesId with any type of body
func NewPutInvoicesIdRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/invoices/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewGetMiscRecordsRequest generates requests for GetMiscRecords
func NewGetMiscRecordsRequest(server string, params *GetMiscRecordsParams) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/misc_records")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.Query != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "query", *params.Query); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Identifier != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "identifier", *params.Identifier); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostMiscRecordsRequest calls the generic PostMiscRecords builder with application/json body
func NewPostMiscRecordsRequest(server string, body PostMiscRecordsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostMiscRecordsRequestWithBody(server, "application/json", bodyReader)
}

// NewPostMiscRecordsRequestWithBody generates requests for PostMiscRecords with any type of body
func NewPostMiscRecordsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/misc_records")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewDeleteMiscRecordsIdRequest generates requests for DeleteMiscRecordsId
func NewDeleteMiscRecordsIdRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/misc_records/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetMiscRecordsIdRequest generates requests for GetMiscRecordsId
func NewGetMiscRecordsIdRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/misc_records/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutMiscRecordsIdRequest calls the generic PutMiscRecordsId builder with application/json body
func NewPutMiscRecordsIdRequest(server string, id string, body PutMiscRecordsIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutMiscRecordsIdRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPutMiscRecordsIdRequestWithBody generates requests for PutMiscRecordsId with any type of body
func NewPutMiscRecordsIdRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/misc_records/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewGetProjectsRequest generates requests for GetProjects
func NewGetProjectsRequest(server string, params *GetProjectsParams) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/projects")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.Query != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "query", *params.Query); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Identifier != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "identifier", *params.Identifier); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostProjectsRequest calls the generic PostProjects builder with application/json body
func NewPostProjectsRequest(server string, body PostProjectsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostProjectsRequestWithBody(server, "application/json", bodyReader)
}

// NewPostProjectsRequestWithBody generates requests for PostProjects with any type of body
func NewPostProjectsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/projects")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewDeleteProjectsIdRequest generates requests for DeleteProjectsId
func NewDeleteProjectsIdRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/projects/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetProjectsIdRequest generates requests for GetProjectsId
func NewGetProjectsIdRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/projects/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutProjectsIdRequest calls the generic PutProjectsId builder with application/json body
func NewPutProjectsIdRequest(server string, id string, body PutProjectsIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutProjectsIdRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPutProjectsIdRequestWithBody generates requests for PutProjectsId with any type of body
func NewPutProjectsIdRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/projects/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetCustomers request
	GetCustomersWithResponse(ctx context.Context, params *GetCustomersParams) (*GetCustomersResponse, error)

	// PostCustomers request  with any body
	PostCustomersWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PostCustomersResponse, error)

	PostCustomersWithResponse(ctx context.Context, body PostCustomersJSONRequestBody) (*PostCustomersResponse, error)

	// DeleteCustomersId request
	DeleteCustomersIdWithResponse(ctx context.Context, id string) (*DeleteCustomersIdResponse, error)

	// GetCustomersId request
	GetCustomersIdWithResponse(ctx context.Context, id string) (*GetCustomersIdResponse, error)

	// PutCustomersId request  with any body
	PutCustomersIdWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*PutCustomersIdResponse, error)

	PutCustomersIdWithResponse(ctx context.Context, id string, body PutCustomersIdJSONRequestBody) (*PutCustomersIdResponse, error)

	// GetEmployees request
	GetEmployeesWithResponse(ctx context.Context, params *GetEmployeesParams) (*GetEmployeesResponse, error)

	// PostEmployees request  with any body
	PostEmployeesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PostEmployeesResponse, error)

	PostEmployeesWithResponse(ctx context.Context, body PostEmployeesJSONRequestBody) (*PostEmployeesResponse, error)

	// DeleteEmployeesId request
	DeleteEmployeesIdWithResponse(ctx context.Context, id string) (*DeleteEmployeesIdResponse, error)

	// GetEmployeesId request
	GetEmployeesIdWithResponse(ctx context.Context, id string) (*GetEmployeesIdResponse, error)

	// PutEmployeesId request  with any body
	PutEmployeesIdWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*PutEmployeesIdResponse, error)

	PutEmployeesIdWithResponse(ctx context.Context, id string, body PutEmployeesIdJSONRequestBody) (*PutEmployeesIdResponse, error)

	// GetExpenses request
	GetExpensesWithResponse(ctx context.Context, params *GetExpensesParams) (*GetExpensesResponse, error)

	// PostExpenses request  with any body
	PostExpensesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PostExpensesResponse, error)

	PostExpensesWithResponse(ctx context.Context, body PostExpensesJSONRequestBody) (*PostExpensesResponse, error)

	// DeleteExpensesId request
	DeleteExpensesIdWithResponse(ctx context.Context, id string) (*DeleteExpensesIdResponse, error)

	// GetExpensesId request
	GetExpensesIdWithResponse(ctx context.Context, id string) (*GetExpensesIdResponse, error)

	// PutExpensesId request  with any body
	PutExpensesIdWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*PutExpensesIdResponse, error)

	PutExpensesIdWithResponse(ctx context.Context, id string, body PutExpensesIdJSONRequestBody) (*PutExpensesIdResponse, error)

	// GetInvoices request
	GetInvoicesWithResponse(ctx context.Context, params *GetInvoicesParams) (*GetInvoicesResponse, error)

	// PostInvoices request  with any body
	PostInvoicesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PostInvoicesResponse, error)

	PostInvoicesWithResponse(ctx context.Context, body PostInvoicesJSONRequestBody) (*PostInvoicesResponse, error)

	// DeleteInvoicesId request
	DeleteInvoicesIdWithResponse(ctx context.Context, id string) (*DeleteInvoicesIdResponse, error)

	// GetInvoicesId request
	GetInvoicesIdWithResponse(ctx context.Context, id string) (*GetInvoicesIdResponse, error)

	// PutInvoicesId request  with any body
	PutInvoicesIdWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*PutInvoicesIdResponse, error)

	PutInvoicesIdWithResponse(ctx context.Context, id string, body PutInvoicesIdJSONRequestBody) (*PutInvoicesIdResponse, error)

	// GetMiscRecords request
	GetMiscRecordsWithResponse(ctx context.Context, params *GetMiscRecordsParams) (*GetMiscRecordsResponse, error)

	// PostMiscRecords request  with any body
	PostMiscRecordsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PostMiscRecordsResponse, error)

	PostMiscRecordsWithResponse(ctx context.Context, body PostMiscRecordsJSONRequestBody) (*PostMiscRecordsResponse, error)

	// DeleteMiscRecordsId request
	DeleteMiscRecordsIdWithResponse(ctx context.Context, id string) (*DeleteMiscRecordsIdResponse, error)

	// GetMiscRecordsId request
	GetMiscRecordsIdWithResponse(ctx context.Context, id string) (*GetMiscRecordsIdResponse, error)

	// PutMiscRecordsId request  with any body
	PutMiscRecordsIdWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*PutMiscRecordsIdResponse, error)

	PutMiscRecordsIdWithResponse(ctx context.Context, id string, body PutMiscRecordsIdJSONRequestBody) (*PutMiscRecordsIdResponse, error)

	// GetProjects request
	GetProjectsWithResponse(ctx context.Context, params *GetProjectsParams) (*GetProjectsResponse, error)

	// PostProjects request  with any body
	PostProjectsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PostProjectsResponse, error)

	PostProjectsWithResponse(ctx context.Context, body PostProjectsJSONRequestBody) (*PostProjectsResponse, error)

	// DeleteProjectsId request
	DeleteProjectsIdWithResponse(ctx context.Context, id string) (*DeleteProjectsIdResponse, error)

	// GetProjectsId request
	GetProjectsIdWithResponse(ctx context.Context, id string) (*GetProjectsIdResponse, error)

	// PutProjectsId request  with any body
	PutProjectsIdWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*PutProjectsIdResponse, error)

	PutProjectsIdWithResponse(ctx context.Context, id string, body PutProjectsIdJSONRequestBody) (*PutProjectsIdResponse, error)
}

type GetCustomersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Parties
}

// Status returns HTTPResponse.Status
func (r GetCustomersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCustomersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostCustomersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostCustomersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostCustomersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteCustomersIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteCustomersIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteCustomersIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCustomersIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Party
}

// Status returns HTTPResponse.Status
func (r GetCustomersIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCustomersIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutCustomersIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutCustomersIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutCustomersIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetEmployeesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Parties
}

// Status returns HTTPResponse.Status
func (r GetEmployeesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetEmployeesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostEmployeesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostEmployeesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostEmployeesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteEmployeesIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteEmployeesIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteEmployeesIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetEmployeesIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Party
}

// Status returns HTTPResponse.Status
func (r GetEmployeesIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetEmployeesIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutEmployeesIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutEmployeesIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutEmployeesIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetExpensesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Expenses
}

// Status returns HTTPResponse.Status
func (r GetExpensesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetExpensesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostExpensesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostExpensesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostExpensesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteExpensesIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteExpensesIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteExpensesIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetExpensesIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Expense
}

// Status returns HTTPResponse.Status
func (r GetExpensesIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetExpensesIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutExpensesIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutExpensesIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutExpensesIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetInvoicesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Invoices
}

// Status returns HTTPResponse.Status
func (r GetInvoicesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetInvoicesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostInvoicesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostInvoicesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostInvoicesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteInvoicesIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteInvoicesIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteInvoicesIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetInvoicesIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Invoice
}

// Status returns HTTPResponse.Status
func (r GetInvoicesIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetInvoicesIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutInvoicesIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutInvoicesIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutInvoicesIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetMiscRecordsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *MiscRecords
}

// Status returns HTTPResponse.Status
func (r GetMiscRecordsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetMiscRecordsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostMiscRecordsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostMiscRecordsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostMiscRecordsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteMiscRecordsIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteMiscRecordsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteMiscRecordsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetMiscRecordsIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *MiscRecord
}

// Status returns HTTPResponse.Status
func (r GetMiscRecordsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetMiscRecordsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutMiscRecordsIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutMiscRecordsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutMiscRecordsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetProjectsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Projects
}

// Status returns HTTPResponse.Status
func (r GetProjectsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetProjectsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostProjectsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostProjectsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostProjectsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteProjectsIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteProjectsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteProjectsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetProjectsIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Project
}

// Status returns HTTPResponse.Status
func (r GetProjectsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetProjectsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutProjectsIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutProjectsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutProjectsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetCustomersWithResponse request returning *GetCustomersResponse
func (c *ClientWithResponses) GetCustomersWithResponse(ctx context.Context, params *GetCustomersParams) (*GetCustomersResponse, error) {
	rsp, err := c.GetCustomers(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseGetCustomersResponse(rsp)
}

// PostCustomersWithBodyWithResponse request with arbitrary body returning *PostCustomersResponse
func (c *ClientWithResponses) PostCustomersWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PostCustomersResponse, error) {
	rsp, err := c.PostCustomersWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParsePostCustomersResponse(rsp)
}

func (c *ClientWithResponses) PostCustomersWithResponse(ctx context.Context, body PostCustomersJSONRequestBody) (*PostCustomersResponse, error) {
	rsp, err := c.PostCustomers(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParsePostCustomersResponse(rsp)
}

// DeleteCustomersIdWithResponse request returning *DeleteCustomersIdResponse
func (c *ClientWithResponses) DeleteCustomersIdWithResponse(ctx context.Context, id string) (*DeleteCustomersIdResponse, error) {
	rsp, err := c.DeleteCustomersId(ctx, id)
	if err != nil {
		return nil, err
	}
	return ParseDeleteCustomersIdResponse(rsp)
}

// GetCustomersIdWithResponse request returning *GetCustomersIdResponse
func (c *ClientWithResponses) GetCustomersIdWithResponse(ctx context.Context, id string) (*GetCustomersIdResponse, error) {
	rsp, err := c.GetCustomersId(ctx, id)
	if err != nil {
		return nil, err
	}
	return ParseGetCustomersIdResponse(rsp)
}

// PutCustomersIdWithBodyWithResponse request with arbitrary body returning *PutCustomersIdResponse
func (c *ClientWithResponses) PutCustomersIdWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*PutCustomersIdResponse, error) {
	rsp, err := c.PutCustomersIdWithBody(ctx, id, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParsePutCustomersIdResponse(rsp)
}

func (c *ClientWithResponses) PutCustomersIdWithResponse(ctx context.Context, id string, body PutCustomersIdJSONRequestBody) (*PutCustomersIdResponse, error) {
	rsp, err := c.PutCustomersId(ctx, id, body)
	if err != nil {
		return nil, err
	}
	return ParsePutCustomersIdResponse(rsp)
}

// GetEmployeesWithResponse request returning *GetEmployeesResponse
func (c *ClientWithResponses) GetEmployeesWithResponse(ctx context.Context, params *GetEmployeesParams) (*GetEmployeesResponse, error) {
	rsp, err := c.GetEmployees(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseGetEmployeesResponse(rsp)
}

// PostEmployeesWithBodyWithResponse request with arbitrary body returning *PostEmployeesResponse
func (c *ClientWithResponses) PostEmployeesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PostEmployeesResponse, error) {
	rsp, err := c.PostEmployeesWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParsePostEmployeesResponse(rsp)
}

func (c *ClientWithResponses) PostEmployeesWithResponse(ctx context.Context, body PostEmployeesJSONRequestBody) (*PostEmployeesResponse, error) {
	rsp, err := c.PostEmployees(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParsePostEmployeesResponse(rsp)
}

// DeleteEmployeesIdWithResponse request returning *DeleteEmployeesIdResponse
func (c *ClientWithResponses) DeleteEmployeesIdWithResponse(ctx context.Context, id string) (*DeleteEmployeesIdResponse, error) {
	rsp, err := c.DeleteEmployeesId(ctx, id)
	if err != nil {
		return nil, err
	}
	return ParseDeleteEmployeesIdResponse(rsp)
}

// GetEmployeesIdWithResponse request returning *GetEmployeesIdResponse
func (c *ClientWithResponses) GetEmployeesIdWithResponse(ctx context.Context, id string) (*GetEmployeesIdResponse, error) {
	rsp, err := c.GetEmployeesId(ctx, id)
	if err != nil {
		return nil, err
	}
	return ParseGetEmployeesIdResponse(rsp)
}

// PutEmployeesIdWithBodyWithResponse request with arbitrary body returning *PutEmployeesIdResponse
func (c *ClientWithResponses) PutEmployeesIdWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*PutEmployeesIdResponse, error) {
	rsp, err := c.PutEmployeesIdWithBody(ctx, id, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParsePutEmployeesIdResponse(rsp)
}

func (c *ClientWithResponses) PutEmployeesIdWithResponse(ctx context.Context, id string, body PutEmployeesIdJSONRequestBody) (*PutEmployeesIdResponse, error) {
	rsp, err := c.PutEmployeesId(ctx, id, body)
	if err != nil {
		return nil, err
	}
	return ParsePutEmployeesIdResponse(rsp)
}

// GetExpensesWithResponse request returning *GetExpensesResponse
func (c *ClientWithResponses) GetExpensesWithResponse(ctx context.Context, params *GetExpensesParams) (*GetExpensesResponse, error) {
	rsp, err := c.GetExpenses(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseGetExpensesResponse(rsp)
}

// PostExpensesWithBodyWithResponse request with arbitrary body returning *PostExpensesResponse
func (c *ClientWithResponses) PostExpensesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PostExpensesResponse, error) {
	rsp, err := c.PostExpensesWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParsePostExpensesResponse(rsp)
}

func (c *ClientWithResponses) PostExpensesWithResponse(ctx context.Context, body PostExpensesJSONRequestBody) (*PostExpensesResponse, error) {
	rsp, err := c.PostExpenses(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParsePostExpensesResponse(rsp)
}

// DeleteExpensesIdWithResponse request returning *DeleteExpensesIdResponse
func (c *ClientWithResponses) DeleteExpensesIdWithResponse(ctx context.Context, id string) (*DeleteExpensesIdResponse, error) {
	rsp, err := c.DeleteExpensesId(ctx, id)
	if err != nil {
		return nil, err
	}
	return ParseDeleteExpensesIdResponse(rsp)
}

// GetExpensesIdWithResponse request returning *GetExpensesIdResponse
func (c *ClientWithResponses) GetExpensesIdWithResponse(ctx context.Context, id string) (*GetExpensesIdResponse, error) {
	rsp, err := c.GetExpensesId(ctx, id)
	if err != nil {
		return nil, err
	}
	return ParseGetExpensesIdResponse(rsp)
}

// PutExpensesIdWithBodyWithResponse request with arbitrary body returning *PutExpensesIdResponse
func (c *ClientWithResponses) PutExpensesIdWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*PutExpensesIdResponse, error) {
	rsp, err := c.PutExpensesIdWithBody(ctx, id, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParsePutExpensesIdResponse(rsp)
}

func (c *ClientWithResponses) PutExpensesIdWithResponse(ctx context.Context, id string, body PutExpensesIdJSONRequestBody) (*PutExpensesIdResponse, error) {
	rsp, err := c.PutExpensesId(ctx, id, body)
	if err != nil {
		return nil, err
	}
	return ParsePutExpensesIdResponse(rsp)
}

// GetInvoicesWithResponse request returning *GetInvoicesResponse
func (c *ClientWithResponses) GetInvoicesWithResponse(ctx context.Context, params *GetInvoicesParams) (*GetInvoicesResponse, error) {
	rsp, err := c.GetInvoices(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseGetInvoicesResponse(rsp)
}

// PostInvoicesWithBodyWithResponse request with arbitrary body returning *PostInvoicesResponse
func (c *ClientWithResponses) PostInvoicesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PostInvoicesResponse, error) {
	rsp, err := c.PostInvoicesWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParsePostInvoicesResponse(rsp)
}

func (c *ClientWithResponses) PostInvoicesWithResponse(ctx context.Context, body PostInvoicesJSONRequestBody) (*PostInvoicesResponse, error) {
	rsp, err := c.PostInvoices(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParsePostInvoicesResponse(rsp)
}

// DeleteInvoicesIdWithResponse request returning *DeleteInvoicesIdResponse
func (c *ClientWithResponses) DeleteInvoicesIdWithResponse(ctx context.Context, id string) (*DeleteInvoicesIdResponse, error) {
	rsp, err := c.DeleteInvoicesId(ctx, id)
	if err != nil {
		return nil, err
	}
	return ParseDeleteInvoicesIdResponse(rsp)
}

// GetInvoicesIdWithResponse request returning *GetInvoicesIdResponse
func (c *ClientWithResponses) GetInvoicesIdWithResponse(ctx context.Context, id string) (*GetInvoicesIdResponse, error) {
	rsp, err := c.GetInvoicesId(ctx, id)
	if err != nil {
		return nil, err
	}
	return ParseGetInvoicesIdResponse(rsp)
}

// PutInvoicesIdWithBodyWithResponse request with arbitrary body returning *PutInvoicesIdResponse
func (c *ClientWithResponses) PutInvoicesIdWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*PutInvoicesIdResponse, error) {
	rsp, err := c.PutInvoicesIdWithBody(ctx, id, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParsePutInvoicesIdResponse(rsp)
}

func (c *ClientWithResponses) PutInvoicesIdWithResponse(ctx context.Context, id string, body PutInvoicesIdJSONRequestBody) (*PutInvoicesIdResponse, error) {
	rsp, err := c.PutInvoicesId(ctx, id, body)
	if err != nil {
		return nil, err
	}
	return ParsePutInvoicesIdResponse(rsp)
}

// GetMiscRecordsWithResponse request returning *GetMiscRecordsResponse
func (c *ClientWithResponses) GetMiscRecordsWithResponse(ctx context.Context, params *GetMiscRecordsParams) (*GetMiscRecordsResponse, error) {
	rsp, err := c.GetMiscRecords(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseGetMiscRecordsResponse(rsp)
}

// PostMiscRecordsWithBodyWithResponse request with arbitrary body returning *PostMiscRecordsResponse
func (c *ClientWithResponses) PostMiscRecordsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PostMiscRecordsResponse, error) {
	rsp, err := c.PostMiscRecordsWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParsePostMiscRecordsResponse(rsp)
}

func (c *ClientWithResponses) PostMiscRecordsWithResponse(ctx context.Context, body PostMiscRecordsJSONRequestBody) (*PostMiscRecordsResponse, error) {
	rsp, err := c.PostMiscRecords(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParsePostMiscRecordsResponse(rsp)
}

// DeleteMiscRecordsIdWithResponse request returning *DeleteMiscRecordsIdResponse
func (c *ClientWithResponses) DeleteMiscRecordsIdWithResponse(ctx context.Context, id string) (*DeleteMiscRecordsIdResponse, error) {
	rsp, err := c.DeleteMiscRecordsId(ctx, id)
	if err != nil {
		return nil, err
	}
	return ParseDeleteMiscRecordsIdResponse(rsp)
}

// GetMiscRecordsIdWithResponse request returning *GetMiscRecordsIdResponse
func (c *ClientWithResponses) GetMiscRecordsIdWithResponse(ctx context.Context, id string) (*GetMiscRecordsIdResponse, error) {
	rsp, err := c.GetMiscRecordsId(ctx, id)
	if err != nil {
		return nil, err
	}
	return ParseGetMiscRecordsIdResponse(rsp)
}

// PutMiscRecordsIdWithBodyWithResponse request with arbitrary body returning *PutMiscRecordsIdResponse
func (c *ClientWithResponses) PutMiscRecordsIdWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*PutMiscRecordsIdResponse, error) {
	rsp, err := c.PutMiscRecordsIdWithBody(ctx, id, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParsePutMiscRecordsIdResponse(rsp)
}

func (c *ClientWithResponses) PutMiscRecordsIdWithResponse(ctx context.Context, id string, body PutMiscRecordsIdJSONRequestBody) (*PutMiscRecordsIdResponse, error) {
	rsp, err := c.PutMiscRecordsId(ctx, id, body)
	if err != nil {
		return nil, err
	}
	return ParsePutMiscRecordsIdResponse(rsp)
}

// GetProjectsWithResponse request returning *GetProjectsResponse
func (c *ClientWithResponses) GetProjectsWithResponse(ctx context.Context, params *GetProjectsParams) (*GetProjectsResponse, error) {
	rsp, err := c.GetProjects(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseGetProjectsResponse(rsp)
}

// PostProjectsWithBodyWithResponse request with arbitrary body returning *PostProjectsResponse
func (c *ClientWithResponses) PostProjectsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PostProjectsResponse, error) {
	rsp, err := c.PostProjectsWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParsePostProjectsResponse(rsp)
}

func (c *ClientWithResponses) PostProjectsWithResponse(ctx context.Context, body PostProjectsJSONRequestBody) (*PostProjectsResponse, error) {
	rsp, err := c.PostProjects(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParsePostProjectsResponse(rsp)
}

// DeleteProjectsIdWithResponse request returning *DeleteProjectsIdResponse
func (c *ClientWithResponses) DeleteProjectsIdWithResponse(ctx context.Context, id string) (*DeleteProjectsIdResponse, error) {
	rsp, err := c.DeleteProjectsId(ctx, id)
	if err != nil {
		return nil, err
	}
	return ParseDeleteProjectsIdResponse(rsp)
}

// GetProjectsIdWithResponse request returning *GetProjectsIdResponse
func (c *ClientWithResponses) GetProjectsIdWithResponse(ctx context.Context, id string) (*GetProjectsIdResponse, error) {
	rsp, err := c.GetProjectsId(ctx, id)
	if err != nil {
		return nil, err
	}
	return ParseGetProjectsIdResponse(rsp)
}

// PutProjectsIdWithBodyWithResponse request with arbitrary body returning *PutProjectsIdResponse
func (c *ClientWithResponses) PutProjectsIdWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*PutProjectsIdResponse, error) {
	rsp, err := c.PutProjectsIdWithBody(ctx, id, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParsePutProjectsIdResponse(rsp)
}

func (c *ClientWithResponses) PutProjectsIdWithResponse(ctx context.Context, id string, body PutProjectsIdJSONRequestBody) (*PutProjectsIdResponse, error) {
	rsp, err := c.PutProjectsId(ctx, id, body)
	if err != nil {
		return nil, err
	}
	return ParsePutProjectsIdResponse(rsp)
}

// ParseGetCustomersResponse parses an HTTP response from a GetCustomersWithResponse call
func ParseGetCustomersResponse(rsp *http.Response) (*GetCustomersResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetCustomersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Parties
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostCustomersResponse parses an HTTP response from a PostCustomersWithResponse call
func ParsePostCustomersResponse(rsp *http.Response) (*PostCustomersResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostCustomersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseDeleteCustomersIdResponse parses an HTTP response from a DeleteCustomersIdWithResponse call
func ParseDeleteCustomersIdResponse(rsp *http.Response) (*DeleteCustomersIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &DeleteCustomersIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetCustomersIdResponse parses an HTTP response from a GetCustomersIdWithResponse call
func ParseGetCustomersIdResponse(rsp *http.Response) (*GetCustomersIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetCustomersIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Party
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutCustomersIdResponse parses an HTTP response from a PutCustomersIdWithResponse call
func ParsePutCustomersIdResponse(rsp *http.Response) (*PutCustomersIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PutCustomersIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetEmployeesResponse parses an HTTP response from a GetEmployeesWithResponse call
func ParseGetEmployeesResponse(rsp *http.Response) (*GetEmployeesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetEmployeesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Parties
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostEmployeesResponse parses an HTTP response from a PostEmployeesWithResponse call
func ParsePostEmployeesResponse(rsp *http.Response) (*PostEmployeesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostEmployeesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseDeleteEmployeesIdResponse parses an HTTP response from a DeleteEmployeesIdWithResponse call
func ParseDeleteEmployeesIdResponse(rsp *http.Response) (*DeleteEmployeesIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &DeleteEmployeesIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetEmployeesIdResponse parses an HTTP response from a GetEmployeesIdWithResponse call
func ParseGetEmployeesIdResponse(rsp *http.Response) (*GetEmployeesIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetEmployeesIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Party
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutEmployeesIdResponse parses an HTTP response from a PutEmployeesIdWithResponse call
func ParsePutEmployeesIdResponse(rsp *http.Response) (*PutEmployeesIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PutEmployeesIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetExpensesResponse parses an HTTP response from a GetExpensesWithResponse call
func ParseGetExpensesResponse(rsp *http.Response) (*GetExpensesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetExpensesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Expenses
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostExpensesResponse parses an HTTP response from a PostExpensesWithResponse call
func ParsePostExpensesResponse(rsp *http.Response) (*PostExpensesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostExpensesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseDeleteExpensesIdResponse parses an HTTP response from a DeleteExpensesIdWithResponse call
func ParseDeleteExpensesIdResponse(rsp *http.Response) (*DeleteExpensesIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &DeleteExpensesIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetExpensesIdResponse parses an HTTP response from a GetExpensesIdWithResponse call
func ParseGetExpensesIdResponse(rsp *http.Response) (*GetExpensesIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetExpensesIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Expense
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutExpensesIdResponse parses an HTTP response from a PutExpensesIdWithResponse call
func ParsePutExpensesIdResponse(rsp *http.Response) (*PutExpensesIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PutExpensesIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetInvoicesResponse parses an HTTP response from a GetInvoicesWithResponse call
func ParseGetInvoicesResponse(rsp *http.Response) (*GetInvoicesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetInvoicesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Invoices
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostInvoicesResponse parses an HTTP response from a PostInvoicesWithResponse call
func ParsePostInvoicesResponse(rsp *http.Response) (*PostInvoicesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostInvoicesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseDeleteInvoicesIdResponse parses an HTTP response from a DeleteInvoicesIdWithResponse call
func ParseDeleteInvoicesIdResponse(rsp *http.Response) (*DeleteInvoicesIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &DeleteInvoicesIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetInvoicesIdResponse parses an HTTP response from a GetInvoicesIdWithResponse call
func ParseGetInvoicesIdResponse(rsp *http.Response) (*GetInvoicesIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetInvoicesIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Invoice
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutInvoicesIdResponse parses an HTTP response from a PutInvoicesIdWithResponse call
func ParsePutInvoicesIdResponse(rsp *http.Response) (*PutInvoicesIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PutInvoicesIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetMiscRecordsResponse parses an HTTP response from a GetMiscRecordsWithResponse call
func ParseGetMiscRecordsResponse(rsp *http.Response) (*GetMiscRecordsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetMiscRecordsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest MiscRecords
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostMiscRecordsResponse parses an HTTP response from a PostMiscRecordsWithResponse call
func ParsePostMiscRecordsResponse(rsp *http.Response) (*PostMiscRecordsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostMiscRecordsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseDeleteMiscRecordsIdResponse parses an HTTP response from a DeleteMiscRecordsIdWithResponse call
func ParseDeleteMiscRecordsIdResponse(rsp *http.Response) (*DeleteMiscRecordsIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &DeleteMiscRecordsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetMiscRecordsIdResponse parses an HTTP response from a GetMiscRecordsIdWithResponse call
func ParseGetMiscRecordsIdResponse(rsp *http.Response) (*GetMiscRecordsIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetMiscRecordsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest MiscRecord
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutMiscRecordsIdResponse parses an HTTP response from a PutMiscRecordsIdWithResponse call
func ParsePutMiscRecordsIdResponse(rsp *http.Response) (*PutMiscRecordsIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PutMiscRecordsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetProjectsResponse parses an HTTP response from a GetProjectsWithResponse call
func ParseGetProjectsResponse(rsp *http.Response) (*GetProjectsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetProjectsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Projects
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostProjectsResponse parses an HTTP response from a PostProjectsWithResponse call
func ParsePostProjectsResponse(rsp *http.Response) (*PostProjectsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostProjectsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseDeleteProjectsIdResponse parses an HTTP response from a DeleteProjectsIdWithResponse call
func ParseDeleteProjectsIdResponse(rsp *http.Response) (*DeleteProjectsIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &DeleteProjectsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetProjectsIdResponse parses an HTTP response from a GetProjectsIdWithResponse call
func ParseGetProjectsIdResponse(rsp *http.Response) (*GetProjectsIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetProjectsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Project
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutProjectsIdResponse parses an HTTP response from a PutProjectsIdWithResponse call
func ParsePutProjectsIdResponse(rsp *http.Response) (*PutProjectsIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PutProjectsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get all customers
	// (GET /customers)
	GetCustomers(ctx echo.Context, params GetCustomersParams) error
	// Add a customer
	// (POST /customers)
	PostCustomers(ctx echo.Context) error
	// Remove a customer
	// (DELETE /customers/{id})
	DeleteCustomersId(ctx echo.Context, id string) error
	// Get a customer by ID
	// (GET /customers/{id})
	GetCustomersId(ctx echo.Context, id string) error
	// Update a customer
	// (PUT /customers/{id})
	PutCustomersId(ctx echo.Context, id string) error
	// Get all employees
	// (GET /employees)
	GetEmployees(ctx echo.Context, params GetEmployeesParams) error
	// Add a employee
	// (POST /employees)
	PostEmployees(ctx echo.Context) error
	// Remove a employee
	// (DELETE /employees/{id})
	DeleteEmployeesId(ctx echo.Context, id string) error
	// Get a employee by ID
	// (GET /employees/{id})
	GetEmployeesId(ctx echo.Context, id string) error
	// Update a employee
	// (PUT /employees/{id})
	PutEmployeesId(ctx echo.Context, id string) error
	// Get all Expenses
	// (GET /expenses)
	GetExpenses(ctx echo.Context, params GetExpensesParams) error
	// Add a Expense
	// (POST /expenses)
	PostExpenses(ctx echo.Context) error
	// Remove a Expense
	// (DELETE /expenses/{id})
	DeleteExpensesId(ctx echo.Context, id string) error
	// Get a Expense by ID
	// (GET /expenses/{id})
	GetExpensesId(ctx echo.Context, id string) error
	// Update a Expense
	// (PUT /expenses/{id})
	PutExpensesId(ctx echo.Context, id string) error
	// Get all invoices
	// (GET /invoices)
	GetInvoices(ctx echo.Context, params GetInvoicesParams) error
	// Add a Invoice
	// (POST /invoices)
	PostInvoices(ctx echo.Context) error
	// Remove a Invoice
	// (DELETE /invoices/{id})
	DeleteInvoicesId(ctx echo.Context, id string) error
	// Get a Invoice by ID
	// (GET /invoices/{id})
	GetInvoicesId(ctx echo.Context, id string) error
	// Update a Invoice
	// (PUT /invoices/{id})
	PutInvoicesId(ctx echo.Context, id string) error
	// Get all Miscellaneous Records
	// (GET /misc_records)
	GetMiscRecords(ctx echo.Context, params GetMiscRecordsParams) error
	// Add a Miscellaneous Record
	// (POST /misc_records)
	PostMiscRecords(ctx echo.Context) error
	// Remove a Miscellaneous Record
	// (DELETE /misc_records/{id})
	DeleteMiscRecordsId(ctx echo.Context, id string) error
	// Get a Miscellaneous Record by ID
	// (GET /misc_records/{id})
	GetMiscRecordsId(ctx echo.Context, id string) error
	// Update a Miscellaneous Record
	// (PUT /misc_records/{id})
	PutMiscRecordsId(ctx echo.Context, id string) error
	// Get all Projects
	// (GET /projects)
	GetProjects(ctx echo.Context, params GetProjectsParams) error
	// Add a Project
	// (POST /projects)
	PostProjects(ctx echo.Context) error
	// Remove a Project
	// (DELETE /projects/{id})
	DeleteProjectsId(ctx echo.Context, id string) error
	// Get a Project by ID
	// (GET /projects/{id})
	GetProjectsId(ctx echo.Context, id string) error
	// Update a Project
	// (PUT /projects/{id})
	PutProjectsId(ctx echo.Context, id string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetCustomers converts echo context to params.
func (w *ServerInterfaceWrapper) GetCustomers(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetCustomersParams
	// ------------- Optional query parameter "query" -------------

	err = runtime.BindQueryParameter("form", true, false, "query", ctx.QueryParams(), &params.Query)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter query: %s", err))
	}

	// ------------- Optional query parameter "identifier" -------------

	err = runtime.BindQueryParameter("form", true, false, "identifier", ctx.QueryParams(), &params.Identifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter identifier: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetCustomers(ctx, params)
	return err
}

// PostCustomers converts echo context to params.
func (w *ServerInterfaceWrapper) PostCustomers(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostCustomers(ctx)
	return err
}

// DeleteCustomersId converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteCustomersId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteCustomersId(ctx, id)
	return err
}

// GetCustomersId converts echo context to params.
func (w *ServerInterfaceWrapper) GetCustomersId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetCustomersId(ctx, id)
	return err
}

// PutCustomersId converts echo context to params.
func (w *ServerInterfaceWrapper) PutCustomersId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutCustomersId(ctx, id)
	return err
}

// GetEmployees converts echo context to params.
func (w *ServerInterfaceWrapper) GetEmployees(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetEmployeesParams
	// ------------- Optional query parameter "query" -------------

	err = runtime.BindQueryParameter("form", true, false, "query", ctx.QueryParams(), &params.Query)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter query: %s", err))
	}

	// ------------- Optional query parameter "identifier" -------------

	err = runtime.BindQueryParameter("form", true, false, "identifier", ctx.QueryParams(), &params.Identifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter identifier: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetEmployees(ctx, params)
	return err
}

// PostEmployees converts echo context to params.
func (w *ServerInterfaceWrapper) PostEmployees(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostEmployees(ctx)
	return err
}

// DeleteEmployeesId converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteEmployeesId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteEmployeesId(ctx, id)
	return err
}

// GetEmployeesId converts echo context to params.
func (w *ServerInterfaceWrapper) GetEmployeesId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetEmployeesId(ctx, id)
	return err
}

// PutEmployeesId converts echo context to params.
func (w *ServerInterfaceWrapper) PutEmployeesId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutEmployeesId(ctx, id)
	return err
}

// GetExpenses converts echo context to params.
func (w *ServerInterfaceWrapper) GetExpenses(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetExpensesParams
	// ------------- Optional query parameter "query" -------------

	err = runtime.BindQueryParameter("form", true, false, "query", ctx.QueryParams(), &params.Query)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter query: %s", err))
	}

	// ------------- Optional query parameter "identifier" -------------

	err = runtime.BindQueryParameter("form", true, false, "identifier", ctx.QueryParams(), &params.Identifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter identifier: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetExpenses(ctx, params)
	return err
}

// PostExpenses converts echo context to params.
func (w *ServerInterfaceWrapper) PostExpenses(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostExpenses(ctx)
	return err
}

// DeleteExpensesId converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteExpensesId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteExpensesId(ctx, id)
	return err
}

// GetExpensesId converts echo context to params.
func (w *ServerInterfaceWrapper) GetExpensesId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetExpensesId(ctx, id)
	return err
}

// PutExpensesId converts echo context to params.
func (w *ServerInterfaceWrapper) PutExpensesId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutExpensesId(ctx, id)
	return err
}

// GetInvoices converts echo context to params.
func (w *ServerInterfaceWrapper) GetInvoices(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetInvoicesParams
	// ------------- Optional query parameter "query" -------------

	err = runtime.BindQueryParameter("form", true, false, "query", ctx.QueryParams(), &params.Query)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter query: %s", err))
	}

	// ------------- Optional query parameter "identifier" -------------

	err = runtime.BindQueryParameter("form", true, false, "identifier", ctx.QueryParams(), &params.Identifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter identifier: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetInvoices(ctx, params)
	return err
}

// PostInvoices converts echo context to params.
func (w *ServerInterfaceWrapper) PostInvoices(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostInvoices(ctx)
	return err
}

// DeleteInvoicesId converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteInvoicesId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteInvoicesId(ctx, id)
	return err
}

// GetInvoicesId converts echo context to params.
func (w *ServerInterfaceWrapper) GetInvoicesId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetInvoicesId(ctx, id)
	return err
}

// PutInvoicesId converts echo context to params.
func (w *ServerInterfaceWrapper) PutInvoicesId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutInvoicesId(ctx, id)
	return err
}

// GetMiscRecords converts echo context to params.
func (w *ServerInterfaceWrapper) GetMiscRecords(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetMiscRecordsParams
	// ------------- Optional query parameter "query" -------------

	err = runtime.BindQueryParameter("form", true, false, "query", ctx.QueryParams(), &params.Query)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter query: %s", err))
	}

	// ------------- Optional query parameter "identifier" -------------

	err = runtime.BindQueryParameter("form", true, false, "identifier", ctx.QueryParams(), &params.Identifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter identifier: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetMiscRecords(ctx, params)
	return err
}

// PostMiscRecords converts echo context to params.
func (w *ServerInterfaceWrapper) PostMiscRecords(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostMiscRecords(ctx)
	return err
}

// DeleteMiscRecordsId converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteMiscRecordsId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteMiscRecordsId(ctx, id)
	return err
}

// GetMiscRecordsId converts echo context to params.
func (w *ServerInterfaceWrapper) GetMiscRecordsId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetMiscRecordsId(ctx, id)
	return err
}

// PutMiscRecordsId converts echo context to params.
func (w *ServerInterfaceWrapper) PutMiscRecordsId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutMiscRecordsId(ctx, id)
	return err
}

// GetProjects converts echo context to params.
func (w *ServerInterfaceWrapper) GetProjects(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetProjectsParams
	// ------------- Optional query parameter "query" -------------

	err = runtime.BindQueryParameter("form", true, false, "query", ctx.QueryParams(), &params.Query)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter query: %s", err))
	}

	// ------------- Optional query parameter "identifier" -------------

	err = runtime.BindQueryParameter("form", true, false, "identifier", ctx.QueryParams(), &params.Identifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter identifier: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetProjects(ctx, params)
	return err
}

// PostProjects converts echo context to params.
func (w *ServerInterfaceWrapper) PostProjects(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostProjects(ctx)
	return err
}

// DeleteProjectsId converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteProjectsId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteProjectsId(ctx, id)
	return err
}

// GetProjectsId converts echo context to params.
func (w *ServerInterfaceWrapper) GetProjectsId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetProjectsId(ctx, id)
	return err
}

// PutProjectsId converts echo context to params.
func (w *ServerInterfaceWrapper) PutProjectsId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutProjectsId(ctx, id)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/customers", wrapper.GetCustomers)
	router.POST(baseURL+"/customers", wrapper.PostCustomers)
	router.DELETE(baseURL+"/customers/:id", wrapper.DeleteCustomersId)
	router.GET(baseURL+"/customers/:id", wrapper.GetCustomersId)
	router.PUT(baseURL+"/customers/:id", wrapper.PutCustomersId)
	router.GET(baseURL+"/employees", wrapper.GetEmployees)
	router.POST(baseURL+"/employees", wrapper.PostEmployees)
	router.DELETE(baseURL+"/employees/:id", wrapper.DeleteEmployeesId)
	router.GET(baseURL+"/employees/:id", wrapper.GetEmployeesId)
	router.PUT(baseURL+"/employees/:id", wrapper.PutEmployeesId)
	router.GET(baseURL+"/expenses", wrapper.GetExpenses)
	router.POST(baseURL+"/expenses", wrapper.PostExpenses)
	router.DELETE(baseURL+"/expenses/:id", wrapper.DeleteExpensesId)
	router.GET(baseURL+"/expenses/:id", wrapper.GetExpensesId)
	router.PUT(baseURL+"/expenses/:id", wrapper.PutExpensesId)
	router.GET(baseURL+"/invoices", wrapper.GetInvoices)
	router.POST(baseURL+"/invoices", wrapper.PostInvoices)
	router.DELETE(baseURL+"/invoices/:id", wrapper.DeleteInvoicesId)
	router.GET(baseURL+"/invoices/:id", wrapper.GetInvoicesId)
	router.PUT(baseURL+"/invoices/:id", wrapper.PutInvoicesId)
	router.GET(baseURL+"/misc_records", wrapper.GetMiscRecords)
	router.POST(baseURL+"/misc_records", wrapper.PostMiscRecords)
	router.DELETE(baseURL+"/misc_records/:id", wrapper.DeleteMiscRecordsId)
	router.GET(baseURL+"/misc_records/:id", wrapper.GetMiscRecordsId)
	router.PUT(baseURL+"/misc_records/:id", wrapper.PutMiscRecordsId)
	router.GET(baseURL+"/projects", wrapper.GetProjects)
	router.POST(baseURL+"/projects", wrapper.PostProjects)
	router.DELETE(baseURL+"/projects/:id", wrapper.DeleteProjectsId)
	router.GET(baseURL+"/projects/:id", wrapper.GetProjectsId)
	router.PUT(baseURL+"/projects/:id", wrapper.PutProjectsId)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xde2/cOJL/KoRmgU0O/fIrDwMDnGN7ZgxcskaSweF27FuwxVI3NxKpISk7ncDf7P67",
	"L7YgKVJUN/tldyf2poEBxt2SyKpfVf34E6XqfE2GWMIlVuPkOOnf7CWdJOVFyRkwJZPjr4lMx1Bg8yd8",
	"LoFJ0H8SkKmgpaKcJcfJuT2ABJQCpL4SYVTiSQFMIcIZoOEEqTEgPTRmE8QFwkiNqSCoxEJNkOIIS1kJ",
	"MKdxNuKUjRDPzMdhJSkDKZNOUgpeglAUjEGY3GCWAnkz+ajHutRDzVr3QWEFEt2OQY1heuJnUJQ5nwB0",
	"EKi09xy5Mc3MzgdjCJXIOZpxEfqTdBI1KSE5Toac54BZctfxxjWmXZBZ495DBkJq//V4oWW3Y5qOo+Yk",
	"nQQ+46LM9YyT7uGLZn6pBGUjM33BK6ZiE9YxwvoL7RlG9lz9d8EZTHro1MZQAMJlCYwAQVjHVN1yROiI",
	"KsSqYggCSSixwAqIjjBGhKse+jgGdIPzCtAYG8+GwTC3VI1rVwUASsdY4FSBQGklBLB0glJOoNdycf9g",
	"0DvcR6e//aIzACsFQnvyv1dX5D+urnpXV+Tr/t3VlfzjpPvl+uvB3V9ieAxpnuNhDkvzw8ZVKumj7KJ+",
	"S/NcO5NxcYuF9qYOW1pJxQsQ0TwgWMHfspM0FRXOZ2c/w7Y0+DCnIxsTKECMgLQxGOwddgdH3f2DGQy+",
	"Ht51LQb1/6L+WzM+gFI5mCSasUTHTZ/lyk76c903DohnYS3rIDOuDBb4E6CsErbOUj2uRDhTBlUqzejP",
	"N+tWzUmnWMGIi0j1n+ZYSppNWg5QpgmH+c9pfblOXioRZRkXhQ0GlaiSNtQjYKCT3QyVAxmBQMCUoDCT",
	"Kz30jiuawrGphulpgsKAz1QqDTFlCKdpO/F/4ZzEnKYRIvn994szFyc+/CekytrtDKsYvQEhcY4oAaZo",
	"RtOGARiCOivC6Q8OAOMXL6F7sL9/1D0ke9B9/WI/6x6khxkhr4YHLwb7cfPsBCAiZjL6ZwXaNNFNx1wC",
	"Q83pxljs4OogOeZVTjRM46rADAnAxNRwaCV0X7yOWsF0MsVKbqbgA2anNpSYIXc9KitRcgl60WJc9aJF",
	"znARYZYz82kIEhWAGWWjrMpRgRmDVrK03Pnt5L/Q68FgEHPJcASQ05pulq8njpjqxWSMb0AfKvFk7vxp",
	"d+8oNneJKflvqsZnMKRqJRL1tIklIlRAqvIJ0sM0i0CBbdqb5YfokR96PUqxIPEYlUbkxFgvq/Ic6cMO",
	"N6c4kICUC4IITytDhM8uz37RiXD57tc2kfX15X3F+zUh9UqSRWEUXNfm8tBhKXlKzdJaX9OLjdeQ9EeB",
	"mbSku3h0jEouJR3mgIaYfUKqubDOEzsoaUVhruRxttz5byz9BOz8Bu9U49NWjR+9KGpLgZ1O2+m0nU6b",
	"r9N2QmgnhHZCaCeEajDkrDknKOV5Dqm7FyuqXNEy9/Np/UIVFObSvwjIkuPkp36zR9evN+gc3kkzPRYC",
	"TywD3HCaQmzyC3sIaf1lMXGl0psVTnPEwd8qJRVmRIsve84W9m/S9Wtdf3D+6dqpfexNl/nLB67DrUlN",
	"XRqhsAyVhy6p/+a7AHXkVlz8aHf/VcyKZetRkCPt8PwPr4Q7El8GNkuivTiL1qX7rVhUwA3/BNHRzAGH",
	"iN0cJlTqQBCdOoyjnDMttbS6ZLV0sytSfBmSwMgZVjBfa0eKt1VsGy6orS8hzp+pJaTthuruxYRHbFWp",
	"kyN+e73j9ifN7Tvy3JHnjjy3T57rSHIXv1UludPdEUleUJm+Nxk9O/+bdspLt6knwGzgOMN18rv7CjSs",
	"FJKK5jmiRcmFwkxZKrBJRNmoh84tTMfoBKUCCFV6OECZ4IW9z5eVwMzWcnt1IAsz7S2VKeQ5ZsAriaxX",
	"CAtBb4BsZ5PsofQYs1iuSJZFd2+wOlm+w4XfqIvN2k7f3wDnatxEItjb+xY0GmdRnapde9k8Jr1P8TPE",
	"zbc4jxS+Ji0qZQUEVSVnloV1RuF8IZqowZtKVCfxBFGJCipzwHbFZsTvEadjzEZAzLYeyipVCUD6Doly",
	"dm9maWo7rsx29f2U5c+uon/kil5HLkRXmVW1QyAQIvKhxE3trmZMfQV65vSf5Zf6OaZ8vqpd5jHjPJMm",
	"cYP849sShOSssSE04XmdKOa5jv5P8kKr1wkSkMMNDhSs33lts9huQ2wjpGaD1G9QbgZ9iz+jt5VUIArM",
	"WJzAhJp8NN8ufaJun1hTGWxM2Gf8LiV6aIB+Ruf+Wfse+hmdhrcvrCqS4z8Gnb3rwMqBN4syBSMQxq4c",
	"p8v8NqeE7v79//9P0HQc9ZNLhfNTTiKD/v3isn9pjnf1CW58TIiw7yP4GV4NBlFrpRIAarG59pz6Cb8G",
	"UoDUOZMCoqzlxgeeUlAT9MGOGmN7c+SdiAXNzFK/7skzO9dfZcybw9ezvsTY1Awxb9PqG7LFw8rRvJyx",
	"YjGm3aNdLe5q8THWot3PilXipT1Up7ssIdWrYyvo7Yq65zZubYJJvmajLbKXe/QDPgWrg7BtnrlstjWb",
	"0U4+GVAYVIAk/0Kx1rRYfFK3VCiZjnGmVpPPdYTnUf5TSbRdJF0k17nxuHSXrHqDUTPSzC3Gndm0zbjJ",
	"AM4UtrQFBaZ5cpwUcvSfmRi93O+lvEgcVMnLfUaSTlIJfc5YqVIe9/sjqsbVUJ/YN8fvOjN33FSik8sL",
	"BEyHxuRTJcGtTZR1FXxW6Pz9JVKc5+gkTdENxZo93p9/+JhVuX1tKsN2uyWnqWudqu16e/FxxixeApO8",
	"Ein0uBj164tkX5+r4aDKRvP01MxiDDyrb/sNgSWdpL7VTY6TQe+ot2/eliqB4ZJqFusNegO7JzM2gej7",
	"u0H9aQTRhiFVCSa1ayc6EIYk8xw195H+LSR7+6+x+rMCYTaPCu29rl3sNhCSX0Gd+lmNSsEFKGPCH9H3",
	"Tk1nkHI38Xp+DTfhINlfFZJVWXKhkAQs0jFlI6MGHYk0oyNqVgFpdgW+fJnUFyB+owVQniNMbuwjGZRR",
	"yIk0uwrCez9BBVZ2Am++bXbSicEzNORq3JpPOtPzidnYqy21zVRmO6PAn0AixpG072vCjYYtoI4UM8RZ",
	"PrHvHyLOUjAPu6gGx4DcZLr7aAtJB3KmoGcUhYVAE9RpO5y48bYxp37t0mFSG4ZT1Zxcr50SPWO8jfPt",
	"GCvJtYfPHxVsAa8vwu66kwiQJXdvce0PBo6I6ifIuCzzWkj0/yk1vl+D8ZbtqeilzVDcFK3meQNuU6x3",
	"neTQGtA+/S3OMy4K0In7ZwVSdRDOJddCn9VFqbM6gCpA/nYMAqxSwlbMSr2wKFpAT894FJvxwr0d+gGE",
	"rqRzIbjVmrIqCiwmtuLblKEXGzzSBe/X8uS6VvJ6ijZhaP0eMkbt2htOJhsNgb0nvTNRiMV6KjKEAEGy",
	"SlOQMqvyfNKzYTmMnhvyBsowzYE8DNQTQoKbtTiid52A4ftfKbmzc+Vg9/vbOJ+Z7z3SFyRZBQfvlB12",
	"VUje8QYOwzg1ZQNBF2co4xV7ID7voeA3sBSijlv15i9Sc4HYXOZFS7+x/LuBaCq3UdHDCbo4m1u8ixby",
	"WiE392V1EQMJ49Mo1lfD/cHR8CDrHhykg+7hy6NXXfzy1aD7OttPX+3tvU5x9sIRunloEvB5TRFUAEmO",
	"lahgCa+XVYx0qpkEeAys83tJ8CMqMmvOSjzkHzWsrTT9lfdQmud+1iepNL352xF9521ktyv6nr7+alJ4",
	"E2oIgtR0NeO+W6KGwqx+smrIObFBNeThiyLaYqEV1ZBHekU15J1aWw35K7erhhZDNF8NLQdi22rIm/nd",
	"QLRqyNkxo4baxfvvpoamE+BJqqHt5odXQyvwUNAQtkwM4VAMubaw+vmne+Mmr0WD3ao0D0PNOhsXRU1r",
	"2VPURLX1W5JEHt8fWRH59FwmiXwqbUIRBXnpy6bualyih5oLt0FM4c9YbFMQuQ7Tjemhpq95Fs+QhVYV",
	"Q/Xpq2qh2p/1pZD/IYdtKqFF4CzQQcsw2GTGzRFCTafvd0HQyiA3xYwKCiv2niIo1o//KDRQO/iPg2nW",
	"F0HbTA6vgZZxT9h/s5YC8u/HP0ABBZ08T1ABOeu3o4B8l9oPrYB8ei5TQD6VNqGAaJOXrmpcE9liBRQk",
	"9DZ4Kew03qIC8j1+G1NAQRPqDJ4hC62ogBzMKyog58/aCsg3b25VAS0CZ74CWorBJjMuroAumsbK74Kg",
	"VUBuimkF1KrYeyqgJjSPSwFNBf9xMM3aCmiryeEV0DLuKahM/yGatqK1VFC0ueghkuht0OP0JFWRf9Fh",
	"O7JoDuA/skYK2+KWyaR4M9wmNNO8NjtXdEGZLRFR7RLYBrtNtQZvUUpFm3Y3p6tiw8/FfJrsVhRbQThW",
	"1FtRp9cWX9FRtqvE1oJzvjRbBbEN53FcoOnjjwNiK9Wi803rthmiuKd2mxPMxyXkZlPl0bDd2nLu22WT",
	"13Zr81/YObGW0HP9Ew/RdkEPxhMUds767ei6Bt8f+hUolyHLdJxPpU1ItyAvXeW49p/FSi24cCtvIgQN",
	"a1vUaL7xbWOyrB4ximfIQisqMAfzivLL+bO24nIXbldkLQJnvqZaisEmMy6upoKWuO+CoNVQbopp2dSq",
	"2HtKpiY0j0slTQX/cTDN2vpoq8nhJdFC7rmrAwDmgGl4TK79mb4rMnj7bWrB5gVwBuh2zNGwmkgkVZVl",
	"9retJrwSzc8B6sW+Hi14DWv+aLdcfLK/dT/hVfty/wRzzj+htp1/sKRlA/V7iJHIYBdTgwD1TwWD60Mh",
	"2nl0v0MWGFr67JnDfnUbdfPzlcHFUmHlevanLzc/LelPQKZzmDKNe/AjVVrUIWzP9b+7OZsK/yg4gXxm",
	"kp9++sm/u3TFrqrB4CD9YAr8DDLKqOlVsBX/HrKfrxa/c3WVoL4ZA67YFQvGfvDQ4ciRJFvgndv2v78J",
	"LptmvavHfvDQ87wLSmCBh9FdxPvbFGyNznocm2sTU81DwJDPAt8vbf/D/U2oGyhmPTU/kvOwcSdzvbK8",
	"sMivevV+gAFuhFnP7JEHDz3PO89YtX/BoYC33MHrTvK5q/DoV8GrsrWinlxexHqyOuHi2Cx0zXLTXjga",
	"dm6o9jow6a02I/Lepg/ONMXEirKdptPhnQakE8Hh+u767l8BAAD//01J9a7SdgAA",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}

